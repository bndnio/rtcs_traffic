
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  08004fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  6 .bss          00001e48  20000080  20000080  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ec8  20001ec8  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e7fd  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002563  00000000  00000000  0002e8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cf0  00000000  00000000  00030e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba8  00000000  00000000  00031b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005c08  00000000  00000000  000326a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004806  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003cab6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000039ac  00000000  00000000  0003cb34  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  000404e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000084  00000000  00000000  0004051c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f90 	.word	0x08004f90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004f90 	.word	0x08004f90

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f103 0208 	add.w	r2, r3, #8
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f103 0208 	add.w	r2, r3, #8
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f103 0208 	add.w	r2, r3, #8
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d103      	bne.n	8000bb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e00c      	b.n	8000bcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e002      	b.n	8000bc0 <vListInsert+0x2e>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d9f6      	bls.n	8000bba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	6892      	ldr	r2, [r2, #8]
 8000c1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6852      	ldr	r2, [r2, #4]
 8000c24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d103      	bne.n	8000c38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b04      	subs	r3, #4
 8000c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b04      	subs	r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	f023 0201 	bic.w	r2, r3, #1
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3b04      	subs	r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <pxPortInitialiseStack+0x64>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3b14      	subs	r3, #20
 8000c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3b04      	subs	r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f06f 0202 	mvn.w	r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3b20      	subs	r3, #32
 8000cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	08000cc1 	.word	0x08000cc1

08000cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <prvTaskExitError+0x38>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cce:	d009      	beq.n	8000ce4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	e7fe      	b.n	8000ce2 <prvTaskExitError+0x22>
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000cf6:	e7fe      	b.n	8000cf6 <prvTaskExitError+0x36>
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	00000000 	.word	0x00000000

08000d00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <pxCurrentTCBConst2>)
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	6808      	ldr	r0, [r1, #0]
 8000d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d0a:	f380 8809 	msr	PSP, r0
 8000d0e:	f3bf 8f6f 	isb	sy
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	f380 8811 	msr	BASEPRI, r0
 8000d1a:	4770      	bx	lr
 8000d1c:	f3af 8000 	nop.w

08000d20 <pxCurrentTCBConst2>:
 8000d20:	20001cac 	.word	0x20001cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop

08000d28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <prvPortStartFirstTask+0x1c>)
 8000d2a:	6800      	ldr	r0, [r0, #0]
 8000d2c:	6800      	ldr	r0, [r0, #0]
 8000d2e:	f380 8808 	msr	MSP, r0
 8000d32:	b662      	cpsie	i
 8000d34:	b661      	cpsie	f
 8000d36:	f3bf 8f4f 	dsb	sy
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	df00      	svc	0
 8000d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d42:	bf00      	nop
 8000d44:	e000ed08 	.word	0xe000ed08

08000d48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <xPortStartScheduler+0xf4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <xPortStartScheduler+0xf8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d109      	bne.n	8000d6c <xPortStartScheduler+0x24>
 8000d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5c:	f383 8811 	msr	BASEPRI, r3
 8000d60:	f3bf 8f6f 	isb	sy
 8000d64:	f3bf 8f4f 	dsb	sy
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e7fe      	b.n	8000d6a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <xPortStartScheduler+0xf4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a34      	ldr	r2, [pc, #208]	; (8000e44 <xPortStartScheduler+0xfc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d109      	bne.n	8000d8a <xPortStartScheduler+0x42>
 8000d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7a:	f383 8811 	msr	BASEPRI, r3
 8000d7e:	f3bf 8f6f 	isb	sy
 8000d82:	f3bf 8f4f 	dsb	sy
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e7fe      	b.n	8000d88 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <xPortStartScheduler+0x100>)
 8000d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <xPortStartScheduler+0x104>)
 8000db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <xPortStartScheduler+0x108>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000db8:	e009      	b.n	8000dce <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <xPortStartScheduler+0x108>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <xPortStartScheduler+0x108>)
 8000dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	2b80      	cmp	r3, #128	; 0x80
 8000dd8:	d0ef      	beq.n	8000dba <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <xPortStartScheduler+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <xPortStartScheduler+0x108>)
 8000de2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <xPortStartScheduler+0x108>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <xPortStartScheduler+0x108>)
 8000dee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <xPortStartScheduler+0x10c>)
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <xPortStartScheduler+0x10c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <xPortStartScheduler+0x10c>)
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <xPortStartScheduler+0x10c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000e0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000e10:	f000 f8d2 	bl	8000fb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <xPortStartScheduler+0x110>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000e1a:	f000 f8e9 	bl	8000ff0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <xPortStartScheduler+0x114>)
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <xPortStartScheduler+0x114>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000e2a:	f7ff ff7d 	bl	8000d28 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000e2e:	f7ff ff47 	bl	8000cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	410fc271 	.word	0x410fc271
 8000e44:	410fc270 	.word	0x410fc270
 8000e48:	e000e400 	.word	0xe000e400
 8000e4c:	2000009c 	.word	0x2000009c
 8000e50:	200000a0 	.word	0x200000a0
 8000e54:	e000ed20 	.word	0xe000ed20
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	e000ef34 	.word	0xe000ef34

08000e60 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6a:	f383 8811 	msr	BASEPRI, r3
 8000e6e:	f3bf 8f6f 	isb	sy
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <vPortEnterCritical+0x54>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <vPortEnterCritical+0x54>)
 8000e80:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <vPortEnterCritical+0x54>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10e      	bne.n	8000ea8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <vPortEnterCritical+0x58>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d009      	beq.n	8000ea8 <vPortEnterCritical+0x48>
 8000e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	e7fe      	b.n	8000ea6 <vPortEnterCritical+0x46>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	e000ed04 	.word	0xe000ed04

08000ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <vPortExitCritical+0x4c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <vPortExitCritical+0x22>
 8000eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ece:	f383 8811 	msr	BASEPRI, r3
 8000ed2:	f3bf 8f6f 	isb	sy
 8000ed6:	f3bf 8f4f 	dsb	sy
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	e7fe      	b.n	8000edc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <vPortExitCritical+0x4c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <vPortExitCritical+0x4c>)
 8000ee6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <vPortExitCritical+0x4c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <vPortExitCritical+0x3e>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	00000000 	.word	0x00000000

08000f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000f10:	f3ef 8009 	mrs	r0, PSP
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <pxCurrentTCBConst>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f01e 0f10 	tst.w	lr, #16
 8000f20:	bf08      	it	eq
 8000f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2a:	6010      	str	r0, [r2, #0]
 8000f2c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f34:	f380 8811 	msr	BASEPRI, r0
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f001 f994 	bl	800226c <vTaskSwitchContext>
 8000f44:	f04f 0000 	mov.w	r0, #0
 8000f48:	f380 8811 	msr	BASEPRI, r0
 8000f4c:	bc08      	pop	{r3}
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	6808      	ldr	r0, [r1, #0]
 8000f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f56:	f01e 0f10 	tst.w	lr, #16
 8000f5a:	bf08      	it	eq
 8000f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000f60:	f380 8809 	msr	PSP, r0
 8000f64:	f3bf 8f6f 	isb	sy
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w

08000f70 <pxCurrentTCBConst>:
 8000f70:	20001cac 	.word	0x20001cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop

08000f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8000f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000f90:	f001 f8a8 	bl	80020e4 <xTaskIncrementTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SysTick_Handler+0x3c>)
 8000f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	e000ed04 	.word	0xe000ed04

08000fb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <vPortSetupTimerInterrupt+0x28>)
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <vPortSetupTimerInterrupt+0x2c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <vPortSetupTimerInterrupt+0x30>)
 8000fc4:	fba1 1303 	umull	r1, r3, r1, r3
 8000fc8:	099b      	lsrs	r3, r3, #6
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <vPortSetupTimerInterrupt+0x34>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e014 	.word	0xe000e014
 8000fe4:	20000014 	.word	0x20000014
 8000fe8:	10624dd3 	.word	0x10624dd3
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000ff0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001000 <vPortEnableVFP+0x10>
 8000ff4:	6801      	ldr	r1, [r0, #0]
 8000ff6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ffa:	6001      	str	r1, [r0, #0]
 8000ffc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000ffe:	bf00      	nop
 8001000:	e000ed88 	.word	0xe000ed88

08001004 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800100a:	f3ef 8305 	mrs	r3, IPSR
 800100e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d913      	bls.n	800103e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <vPortValidateInterruptPriority+0x6c>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <vPortValidateInterruptPriority+0x70>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	7afa      	ldrb	r2, [r7, #11]
 8001026:	429a      	cmp	r2, r3
 8001028:	d209      	bcs.n	800103e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102e:	f383 8811 	msr	BASEPRI, r3
 8001032:	f3bf 8f6f 	isb	sy
 8001036:	f3bf 8f4f 	dsb	sy
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	e7fe      	b.n	800103c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <vPortValidateInterruptPriority+0x74>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <vPortValidateInterruptPriority+0x78>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d909      	bls.n	8001062 <vPortValidateInterruptPriority+0x5e>
 800104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	e7fe      	b.n	8001060 <vPortValidateInterruptPriority+0x5c>
	}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e3f0 	.word	0xe000e3f0
 8001074:	2000009c 	.word	0x2000009c
 8001078:	e000ed0c 	.word	0xe000ed0c
 800107c:	200000a0 	.word	0x200000a0

08001080 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f023 0307 	bic.w	r3, r3, #7
 800109c:	3308      	adds	r3, #8
 800109e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80010a0:	f000 ff66 	bl	8001f70 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <pvPortMalloc+0x88>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <pvPortMalloc+0x8c>)
 80010ae:	f023 0307 	bic.w	r3, r3, #7
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <pvPortMalloc+0x88>)
 80010b6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <pvPortMalloc+0x90>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d813      	bhi.n	80010f0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <pvPortMalloc+0x90>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	441a      	add	r2, r3
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <pvPortMalloc+0x90>)
 80010d2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d90b      	bls.n	80010f0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <pvPortMalloc+0x88>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <pvPortMalloc+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <pvPortMalloc+0x90>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <pvPortMalloc+0x90>)
 80010ee:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f0:	f000 ff4c 	bl	8001f8c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80010fa:	f003 f817 	bl	800412c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20001ca8 	.word	0x20001ca8
 800110c:	200000ac 	.word	0x200000ac
 8001110:	20001ca4 	.word	0x20001ca4

08001114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <vPortFree+0x22>
 8001122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001126:	f383 8811 	msr	BASEPRI, r3
 800112a:	f3bf 8f6f 	isb	sy
 800112e:	f3bf 8f4f 	dsb	sy
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e7fe      	b.n	8001134 <vPortFree+0x20>
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <xPortGetFreeHeapSize+0x18>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001150:	3318      	adds	r3, #24
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20001ca4 	.word	0x20001ca4

08001160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <xQueueGenericReset+0x28>
 8001174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e7fe      	b.n	8001186 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001188:	f7ff fe6a 	bl	8000e60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	441a      	add	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	3b01      	subs	r3, #1
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	441a      	add	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	22ff      	movs	r2, #255	; 0xff
 80011d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d114      	bne.n	8001208 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01a      	beq.n	800121c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3310      	adds	r3, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f90c 	bl	8002408 <xTaskRemoveFromEventList>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d012      	beq.n	800121c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <xQueueGenericReset+0xcc>)
 80011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	e009      	b.n	800121c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3310      	adds	r3, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fc6f 	bl	8000af0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3324      	adds	r3, #36	; 0x24
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fc6a 	bl	8000af0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800121c:	f7ff fe4e 	bl	8000ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000ed04 	.word	0xe000ed04

08001230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af02      	add	r7, sp, #8
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <xQueueGenericCreate+0x28>
 8001244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001248:	f383 8811 	msr	BASEPRI, r3
 800124c:	f3bf 8f6f 	isb	sy
 8001250:	f3bf 8f4f 	dsb	sy
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e7fe      	b.n	8001256 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e004      	b.n	800126e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3348      	adds	r3, #72	; 0x48
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff04 	bl	8001080 <pvPortMalloc>
 8001278:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	3348      	adds	r3, #72	; 0x48
 8001284:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f805 	bl	80012a2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001298:	69bb      	ldr	r3, [r7, #24]
	}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e002      	b.n	80012c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012d0:	2101      	movs	r1, #1
 80012d2:	69b8      	ldr	r0, [r7, #24]
 80012d4:	f7ff ff44 	bl	8001160 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <xQueueGenericSend+0x30>
 80012fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001300:	f383 8811 	msr	BASEPRI, r3
 8001304:	f3bf 8f6f 	isb	sy
 8001308:	f3bf 8f4f 	dsb	sy
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
 800130e:	e7fe      	b.n	800130e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <xQueueGenericSend+0x3e>
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <xQueueGenericSend+0x42>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <xQueueGenericSend+0x44>
 8001322:	2300      	movs	r3, #0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <xQueueGenericSend+0x5c>
 8001328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132c:	f383 8811 	msr	BASEPRI, r3
 8001330:	f3bf 8f6f 	isb	sy
 8001334:	f3bf 8f4f 	dsb	sy
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	e7fe      	b.n	800133a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d103      	bne.n	800134a <xQueueGenericSend+0x6a>
 8001342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <xQueueGenericSend+0x6e>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <xQueueGenericSend+0x70>
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <xQueueGenericSend+0x88>
 8001354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001358:	f383 8811 	msr	BASEPRI, r3
 800135c:	f3bf 8f6f 	isb	sy
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	e7fe      	b.n	8001366 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001368:	f001 fa0a 	bl	8002780 <xTaskGetSchedulerState>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <xQueueGenericSend+0x98>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <xQueueGenericSend+0x9c>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <xQueueGenericSend+0x9e>
 800137c:	2300      	movs	r3, #0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <xQueueGenericSend+0xb6>
 8001382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e7fe      	b.n	8001394 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001396:	f7ff fd63 	bl	8000e60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d302      	bcc.n	80013ac <xQueueGenericSend+0xcc>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d129      	bne.n	8001400 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013b2:	f000 fabf 	bl	8001934 <prvCopyDataToQueue>
 80013b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	3324      	adds	r3, #36	; 0x24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 f81f 	bl	8002408 <xTaskRemoveFromEventList>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <xQueueGenericSend+0x1f0>)
 80013d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	e00a      	b.n	80013f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <xQueueGenericSend+0x1f0>)
 80013ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f3bf 8f4f 	dsb	sy
 80013f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80013f8:	f7ff fd60 	bl	8000ebc <vPortExitCritical>
				return pdPASS;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e063      	b.n	80014c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001406:	f7ff fd59 	bl	8000ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800140a:	2300      	movs	r3, #0
 800140c:	e05c      	b.n	80014c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	2b00      	cmp	r3, #0
 8001412:	d106      	bne.n	8001422 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f857 	bl	80024cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800141e:	2301      	movs	r3, #1
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001422:	f7ff fd4b 	bl	8000ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001426:	f000 fda3 	bl	8001f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800142a:	f7ff fd19 	bl	8000e60 <vPortEnterCritical>
 800142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001434:	b25b      	sxtb	r3, r3
 8001436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143a:	d103      	bne.n	8001444 <xQueueGenericSend+0x164>
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d103      	bne.n	800145a <xQueueGenericSend+0x17a>
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800145a:	f7ff fd2f 	bl	8000ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800145e:	1d3a      	adds	r2, r7, #4
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f854 	bl	8002514 <xTaskCheckForTimeOut>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d124      	bne.n	80014bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001474:	f000 fb56 	bl	8001b24 <prvIsQueueFull>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d018      	beq.n	80014b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	3310      	adds	r3, #16
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f000 ff70 	bl	800236c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800148c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800148e:	f000 fae1 	bl	8001a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001492:	f000 fd7b 	bl	8001f8c <xTaskResumeAll>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f af7c 	bne.w	8001396 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <xQueueGenericSend+0x1f0>)
 80014a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	f3bf 8f6f 	isb	sy
 80014ae:	e772      	b.n	8001396 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80014b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014b2:	f000 facf 	bl	8001a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80014b6:	f000 fd69 	bl	8001f8c <xTaskResumeAll>
 80014ba:	e76c      	b.n	8001396 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80014bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014be:	f000 fac9 	bl	8001a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80014c2:	f000 fd63 	bl	8001f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80014c6:	2300      	movs	r3, #0
		}
	}
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	e000ed04 	.word	0xe000ed04

080014d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <xQueueGenericSendFromISR+0x2c>
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	e7fe      	b.n	80014fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <xQueueGenericSendFromISR+0x3a>
 8001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <xQueueGenericSendFromISR+0x3e>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <xQueueGenericSendFromISR+0x40>
 8001512:	2300      	movs	r3, #0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <xQueueGenericSendFromISR+0x58>
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	e7fe      	b.n	800152a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d103      	bne.n	800153a <xQueueGenericSendFromISR+0x66>
 8001532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <xQueueGenericSendFromISR+0x6a>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <xQueueGenericSendFromISR+0x6c>
 800153e:	2300      	movs	r3, #0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <xQueueGenericSendFromISR+0x84>
 8001544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001548:	f383 8811 	msr	BASEPRI, r3
 800154c:	f3bf 8f6f 	isb	sy
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e7fe      	b.n	8001556 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001558:	f7ff fd54 	bl	8001004 <vPortValidateInterruptPriority>
	__asm volatile
 800155c:	f3ef 8211 	mrs	r2, BASEPRI
 8001560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001564:	f383 8811 	msr	BASEPRI, r3
 8001568:	f3bf 8f6f 	isb	sy
 800156c:	f3bf 8f4f 	dsb	sy
 8001570:	61ba      	str	r2, [r7, #24]
 8001572:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001574:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	429a      	cmp	r2, r3
 8001582:	d302      	bcc.n	800158a <xQueueGenericSendFromISR+0xb6>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d12c      	bne.n	80015e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800159a:	f000 f9cb 	bl	8001934 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800159e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	d112      	bne.n	80015ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d016      	beq.n	80015de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	3324      	adds	r3, #36	; 0x24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 ff27 	bl	8002408 <xTaskRemoveFromEventList>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e007      	b.n	80015de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80015ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80015de:	2301      	movs	r3, #1
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80015e2:	e001      	b.n	80015e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <xQueueGiveFromISR+0x28>
	__asm volatile
 8001610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001614:	f383 8811 	msr	BASEPRI, r3
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	f3bf 8f4f 	dsb	sy
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	e7fe      	b.n	8001622 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <xQueueGiveFromISR+0x44>
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e7fe      	b.n	800163e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <xQueueGiveFromISR+0x54>
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <xQueueGiveFromISR+0x58>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <xQueueGiveFromISR+0x5a>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <xQueueGiveFromISR+0x72>
 800165a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	e7fe      	b.n	800166c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800166e:	f7ff fcc9 	bl	8001004 <vPortValidateInterruptPriority>
	__asm volatile
 8001672:	f3ef 8211 	mrs	r2, BASEPRI
 8001676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167a:	f383 8811 	msr	BASEPRI, r3
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	f3bf 8f4f 	dsb	sy
 8001686:	617a      	str	r2, [r7, #20]
 8001688:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800168a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	429a      	cmp	r2, r3
 800169c:	d92b      	bls.n	80016f6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80016b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d112      	bne.n	80016e0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d016      	beq.n	80016f0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	3324      	adds	r3, #36	; 0x24
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fe9e 	bl	8002408 <xTaskRemoveFromEventList>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00b      	beq.n	80016f0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e007      	b.n	80016f0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80016e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80016f0:	2301      	movs	r3, #1
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
 80016f4:	e001      	b.n	80016fa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001706:	4618      	mov	r0, r3
 8001708:	3738      	adds	r7, #56	; 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <xQueueGenericReceive+0x30>
	__asm volatile
 800172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	e7fe      	b.n	800173e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <xQueueGenericReceive+0x3e>
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <xQueueGenericReceive+0x42>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <xQueueGenericReceive+0x44>
 8001752:	2300      	movs	r3, #0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <xQueueGenericReceive+0x5c>
 8001758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	e7fe      	b.n	800176a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800176c:	f001 f808 	bl	8002780 <xTaskGetSchedulerState>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <xQueueGenericReceive+0x6c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <xQueueGenericReceive+0x70>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <xQueueGenericReceive+0x72>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <xQueueGenericReceive+0x8a>
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	e7fe      	b.n	8001798 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800179a:	f7ff fb61 	bl	8000e60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d046      	beq.n	8001838 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017b4:	f000 f928 	bl	8001a08 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d121      	bne.n	8001802 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80017ce:	f001 f8ef 	bl	80029b0 <pvTaskIncrementMutexHeldCount>
 80017d2:	4602      	mov	r2, r0
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d027      	beq.n	8001830 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	3310      	adds	r3, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fe0f 	bl	8002408 <xTaskRemoveFromEventList>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01f      	beq.n	8001830 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <xQueueGenericReceive+0x220>)
 80017f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f3bf 8f4f 	dsb	sy
 80017fc:	f3bf 8f6f 	isb	sy
 8001800:	e016      	b.n	8001830 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001806:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00f      	beq.n	8001830 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	3324      	adds	r3, #36	; 0x24
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fdf7 	bl	8002408 <xTaskRemoveFromEventList>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <xQueueGenericReceive+0x220>)
 8001822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001830:	f7ff fb44 	bl	8000ebc <vPortExitCritical>
				return pdPASS;
 8001834:	2301      	movs	r3, #1
 8001836:	e077      	b.n	8001928 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800183e:	f7ff fb3d 	bl	8000ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001842:	2300      	movs	r3, #0
 8001844:	e070      	b.n	8001928 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	2b00      	cmp	r3, #0
 800184a:	d106      	bne.n	800185a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fe3b 	bl	80024cc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001856:	2301      	movs	r3, #1
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800185a:	f7ff fb2f 	bl	8000ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800185e:	f000 fb87 	bl	8001f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001862:	f7ff fafd 	bl	8000e60 <vPortEnterCritical>
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800186c:	b25b      	sxtb	r3, r3
 800186e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001872:	d103      	bne.n	800187c <xQueueGenericReceive+0x16c>
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001882:	b25b      	sxtb	r3, r3
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d103      	bne.n	8001892 <xQueueGenericReceive+0x182>
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001892:	f7ff fb13 	bl	8000ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fe38 	bl	8002514 <xTaskCheckForTimeOut>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d131      	bne.n	800190e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018ac:	f000 f924 	bl	8001af8 <prvIsQueueEmpty>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d025      	beq.n	8001902 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80018be:	f7ff facf 	bl	8000e60 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ff78 	bl	80027bc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80018cc:	f7ff faf6 	bl	8000ebc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	3324      	adds	r3, #36	; 0x24
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fd47 	bl	800236c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018e0:	f000 f8b8 	bl	8001a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80018e4:	f000 fb52 	bl	8001f8c <xTaskResumeAll>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f af55 	bne.w	800179a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <xQueueGenericReceive+0x220>)
 80018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	e74b      	b.n	800179a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001904:	f000 f8a6 	bl	8001a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001908:	f000 fb40 	bl	8001f8c <xTaskResumeAll>
 800190c:	e745      	b.n	800179a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800190e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001910:	f000 f8a0 	bl	8001a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001914:	f000 fb3a 	bl	8001f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800191a:	f000 f8ed 	bl	8001af8 <prvIsQueueEmpty>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	f43f af3a 	beq.w	800179a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001926:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001928:	4618      	mov	r0, r3
 800192a:	3738      	adds	r7, #56	; 0x38
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	e000ed04 	.word	0xe000ed04

08001934 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d14d      	bne.n	80019f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 ffa2 	bl	80028a8 <xTaskPriorityDisinherit>
 8001964:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	e043      	b.n	80019f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d119      	bne.n	80019a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	f003 f988 	bl	8004c94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	441a      	add	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d32b      	bcc.n	80019f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	e026      	b.n	80019f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68d8      	ldr	r0, [r3, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	461a      	mov	r2, r3
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	f003 f96e 	bl	8004c94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	425b      	negs	r3, r3
 80019c2:	441a      	add	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	425b      	negs	r3, r3
 80019de:	441a      	add	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d105      	bne.n	80019f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80019fe:	697b      	ldr	r3, [r7, #20]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d018      	beq.n	8001a4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d303      	bcc.n	8001a3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	461a      	mov	r2, r3
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f003 f924 	bl	8004c94 <memcpy>
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001a5c:	f7ff fa00 	bl	8000e60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a68:	e011      	b.n	8001a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3324      	adds	r3, #36	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fcc6 	bl	8002408 <xTaskRemoveFromEventList>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001a82:	f000 fda5 	bl	80025d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dce9      	bgt.n	8001a6a <prvUnlockQueue+0x16>
 8001a96:	e000      	b.n	8001a9a <prvUnlockQueue+0x46>
					break;
 8001a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001aa2:	f7ff fa0b 	bl	8000ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001aa6:	f7ff f9db 	bl	8000e60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ab0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ab2:	e011      	b.n	8001ad8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3310      	adds	r3, #16
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fca1 	bl	8002408 <xTaskRemoveFromEventList>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001acc:	f000 fd80 	bl	80025d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dce9      	bgt.n	8001ab4 <prvUnlockQueue+0x60>
 8001ae0:	e000      	b.n	8001ae4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001aec:	f7ff f9e6 	bl	8000ebc <vPortExitCritical>
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b00:	f7ff f9ae 	bl	8000e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e001      	b.n	8001b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001b16:	f7ff f9d1 	bl	8000ebc <vPortExitCritical>

	return xReturn;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b2c:	f7ff f998 	bl	8000e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d102      	bne.n	8001b42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e001      	b.n	8001b46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001b46:	f7ff f9b9 	bl	8000ebc <vPortExitCritical>

	return xReturn;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e014      	b.n	8001b8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <vQueueAddToRegistry+0x4c>)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001b70:	490b      	ldr	r1, [pc, #44]	; (8001ba0 <vQueueAddToRegistry+0x4c>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <vQueueAddToRegistry+0x4c>)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001b86:	e005      	b.n	8001b94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b07      	cmp	r3, #7
 8001b92:	d9e7      	bls.n	8001b64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20001e08 	.word	0x20001e08

08001ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001bb4:	f7ff f954 	bl	8000e60 <vPortEnterCritical>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d103      	bne.n	8001bce <vQueueWaitForMessageRestricted+0x2a>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d103      	bne.n	8001be4 <vQueueWaitForMessageRestricted+0x40>
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001be4:	f7ff f96a 	bl	8000ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3324      	adds	r3, #36	; 0x24
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fbdb 	bl	80023b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff28 	bl	8001a54 <prvUnlockQueue>
	}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa2d 	bl	8001080 <pvPortMalloc>
 8001c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00e      	beq.n	8001c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c2e:	2050      	movs	r0, #80	; 0x50
 8001c30:	f7ff fa26 	bl	8001080 <pvPortMalloc>
 8001c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
 8001c42:	e005      	b.n	8001c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c44:	6978      	ldr	r0, [r7, #20]
 8001c46:	f7ff fa65 	bl	8001114 <vPortFree>
 8001c4a:	e001      	b.n	8001c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d013      	beq.n	8001c7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f80e 	bl	8001c8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c72:	69f8      	ldr	r0, [r7, #28]
 8001c74:	f000 f892 	bl	8001d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e002      	b.n	8001c84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c84:	69bb      	ldr	r3, [r7, #24]
	}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b088      	sub	sp, #32
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	21a5      	movs	r1, #165	; 0xa5
 8001ca8:	f002 ffff 	bl	8004caa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f023 0307 	bic.w	r3, r3, #7
 8001cc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <prvInitialiseNewTask+0x56>
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e7fe      	b.n	8001ce2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	e012      	b.n	8001d10 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	7819      	ldrb	r1, [r3, #0]
 8001cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3334      	adds	r3, #52	; 0x34
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b09      	cmp	r3, #9
 8001d14:	d9e9      	bls.n	8001cea <prvInitialiseNewTask+0x5c>
 8001d16:	e000      	b.n	8001d1a <prvInitialiseNewTask+0x8c>
		{
			break;
 8001d18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d901      	bls.n	8001d2c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	3304      	adds	r3, #4
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fef4 	bl	8000b30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe feef 	bl	8000b30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	f1c3 0205 	rsb	r2, r3, #5
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	69b8      	ldr	r0, [r7, #24]
 8001d7c:	f7fe ff6c 	bl	8000c58 <pxPortInitialiseStack>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001da4:	f7ff f85c 	bl	8000e60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <prvAddNewTaskToReadyList+0xb8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <prvAddNewTaskToReadyList+0xb8>)
 8001db0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <prvAddNewTaskToReadyList+0xbc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001dba:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <prvAddNewTaskToReadyList+0xbc>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <prvAddNewTaskToReadyList+0xb8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d110      	bne.n	8001dea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001dc8:	f000 fc28 	bl	800261c <prvInitialiseTaskLists>
 8001dcc:	e00d      	b.n	8001dea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <prvAddNewTaskToReadyList+0xc0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <prvAddNewTaskToReadyList+0xbc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d802      	bhi.n	8001dea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <prvAddNewTaskToReadyList+0xbc>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <prvAddNewTaskToReadyList+0xc4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <prvAddNewTaskToReadyList+0xc4>)
 8001df2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <prvAddNewTaskToReadyList+0xc8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <prvAddNewTaskToReadyList+0xc8>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4a15      	ldr	r2, [pc, #84]	; (8001e68 <prvAddNewTaskToReadyList+0xcc>)
 8001e14:	441a      	add	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fe94 	bl	8000b4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e22:	f7ff f84b 	bl	8000ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <prvAddNewTaskToReadyList+0xc0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <prvAddNewTaskToReadyList+0xbc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <prvAddNewTaskToReadyList+0xd0>)
 8001e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20001d84 	.word	0x20001d84
 8001e58:	20001cac 	.word	0x20001cac
 8001e5c:	20001d90 	.word	0x20001d90
 8001e60:	20001da0 	.word	0x20001da0
 8001e64:	20001d8c 	.word	0x20001d8c
 8001e68:	20001cb0 	.word	0x20001cb0
 8001e6c:	e000ed04 	.word	0xe000ed04

08001e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <vTaskDelay+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <vTaskDelay+0x2e>
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	e7fe      	b.n	8001e9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001e9e:	f000 f867 	bl	8001f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fd97 	bl	80029d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001eaa:	f000 f86f 	bl	8001f8c <xTaskResumeAll>
 8001eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <vTaskDelay+0x64>)
 8001eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20001dac 	.word	0x20001dac
 8001ed4:	e000ed04 	.word	0xe000ed04

08001ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <vTaskStartScheduler+0x80>)
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2282      	movs	r2, #130	; 0x82
 8001eea:	491c      	ldr	r1, [pc, #112]	; (8001f5c <vTaskStartScheduler+0x84>)
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <vTaskStartScheduler+0x88>)
 8001eee:	f7ff fe8d 	bl	8001c0c <xTaskCreate>
 8001ef2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001efa:	f000 fdd3 	bl	8002aa4 <xTimerCreateTimerTask>
 8001efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d115      	bne.n	8001f32 <vTaskStartScheduler+0x5a>
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <vTaskStartScheduler+0x8c>)
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <vTaskStartScheduler+0x90>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <vTaskStartScheduler+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f2c:	f7fe ff0c 	bl	8000d48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f30:	e00d      	b.n	8001f4e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d109      	bne.n	8001f4e <vTaskStartScheduler+0x76>
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	e7fe      	b.n	8001f4c <vTaskStartScheduler+0x74>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20001da8 	.word	0x20001da8
 8001f5c:	08004ef8 	.word	0x08004ef8
 8001f60:	080025e9 	.word	0x080025e9
 8001f64:	20001da4 	.word	0x20001da4
 8001f68:	20001d90 	.word	0x20001d90
 8001f6c:	20001d88 	.word	0x20001d88

08001f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <vTaskSuspendAll+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <vTaskSuspendAll+0x18>)
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20001dac 	.word	0x20001dac

08001f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <xTaskResumeAll+0x114>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <xTaskResumeAll+0x2a>
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	e7fe      	b.n	8001fb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001fb6:	f7fe ff53 	bl	8000e60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <xTaskResumeAll+0x114>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <xTaskResumeAll+0x114>)
 8001fc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <xTaskResumeAll+0x114>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d161      	bne.n	8002090 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <xTaskResumeAll+0x118>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05d      	beq.n	8002090 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fd4:	e02e      	b.n	8002034 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001fd6:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <xTaskResumeAll+0x11c>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe0e 	bl	8000c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fe09 	bl	8000c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <xTaskResumeAll+0x120>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <xTaskResumeAll+0x120>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <xTaskResumeAll+0x124>)
 8002012:	441a      	add	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3304      	adds	r3, #4
 8002018:	4619      	mov	r1, r3
 800201a:	4610      	mov	r0, r2
 800201c:	f7fe fd95 	bl	8000b4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <xTaskResumeAll+0x128>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <xTaskResumeAll+0x12c>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <xTaskResumeAll+0x11c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1cc      	bne.n	8001fd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002042:	f000 fb77 	bl	8002734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <xTaskResumeAll+0x130>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002052:	f000 f847 	bl	80020e4 <xTaskIncrementTick>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <xTaskResumeAll+0x12c>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3b01      	subs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f1      	bne.n	8002052 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <xTaskResumeAll+0x130>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <xTaskResumeAll+0x12c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800207c:	2301      	movs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <xTaskResumeAll+0x134>)
 8002082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002090:	f7fe ff14 	bl	8000ebc <vPortExitCritical>

	return xAlreadyYielded;
 8002094:	68bb      	ldr	r3, [r7, #8]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20001dac 	.word	0x20001dac
 80020a4:	20001d84 	.word	0x20001d84
 80020a8:	20001d44 	.word	0x20001d44
 80020ac:	20001d8c 	.word	0x20001d8c
 80020b0:	20001cb0 	.word	0x20001cb0
 80020b4:	20001cac 	.word	0x20001cac
 80020b8:	20001d98 	.word	0x20001d98
 80020bc:	20001d94 	.word	0x20001d94
 80020c0:	e000ed04 	.word	0xe000ed04

080020c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <xTaskGetTickCount+0x1c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20001d88 	.word	0x20001d88

080020e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ee:	4b54      	ldr	r3, [pc, #336]	; (8002240 <xTaskIncrementTick+0x15c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8092 	bne.w	800221c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <xTaskIncrementTick+0x160>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <xTaskIncrementTick+0x160>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11f      	bne.n	800214c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800210c:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <xTaskIncrementTick+0x164>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <xTaskIncrementTick+0x46>
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	e7fe      	b.n	8002128 <xTaskIncrementTick+0x44>
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <xTaskIncrementTick+0x164>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <xTaskIncrementTick+0x168>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a44      	ldr	r2, [pc, #272]	; (8002248 <xTaskIncrementTick+0x164>)
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4a44      	ldr	r2, [pc, #272]	; (800224c <xTaskIncrementTick+0x168>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <xTaskIncrementTick+0x16c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a42      	ldr	r2, [pc, #264]	; (8002250 <xTaskIncrementTick+0x16c>)
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	f000 faf4 	bl	8002734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <xTaskIncrementTick+0x170>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	429a      	cmp	r2, r3
 8002154:	d34d      	bcc.n	80021f2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <xTaskIncrementTick+0x164>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <xTaskIncrementTick+0x80>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <xTaskIncrementTick+0x82>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <xTaskIncrementTick+0x170>)
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	601a      	str	r2, [r3, #0]
					break;
 8002172:	e03e      	b.n	80021f2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <xTaskIncrementTick+0x164>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d203      	bcs.n	8002194 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <xTaskIncrementTick+0x170>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
						break;
 8002192:	e02e      	b.n	80021f2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3304      	adds	r3, #4
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fd33 	bl	8000c04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3318      	adds	r3, #24
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fd2a 	bl	8000c04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <xTaskIncrementTick+0x174>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <xTaskIncrementTick+0x174>)
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4a23      	ldr	r2, [pc, #140]	; (800225c <xTaskIncrementTick+0x178>)
 80021d0:	441a      	add	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3304      	adds	r3, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f7fe fcb6 	bl	8000b4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <xTaskIncrementTick+0x17c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3b4      	bcc.n	8002156 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f0:	e7b1      	b.n	8002156 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <xTaskIncrementTick+0x17c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	4918      	ldr	r1, [pc, #96]	; (800225c <xTaskIncrementTick+0x178>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d901      	bls.n	800220e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800220a:	2301      	movs	r3, #1
 800220c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <xTaskIncrementTick+0x180>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 8002216:	f001 ff67 	bl	80040e8 <vApplicationTickHook>
 800221a:	e006      	b.n	800222a <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <xTaskIncrementTick+0x180>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <xTaskIncrementTick+0x180>)
 8002224:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8002226:	f001 ff5f 	bl	80040e8 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <xTaskIncrementTick+0x184>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002236:	697b      	ldr	r3, [r7, #20]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20001dac 	.word	0x20001dac
 8002244:	20001d88 	.word	0x20001d88
 8002248:	20001d3c 	.word	0x20001d3c
 800224c:	20001d40 	.word	0x20001d40
 8002250:	20001d9c 	.word	0x20001d9c
 8002254:	20001da4 	.word	0x20001da4
 8002258:	20001d8c 	.word	0x20001d8c
 800225c:	20001cb0 	.word	0x20001cb0
 8002260:	20001cac 	.word	0x20001cac
 8002264:	20001d94 	.word	0x20001d94
 8002268:	20001d98 	.word	0x20001d98

0800226c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <vTaskSwitchContext+0xec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <vTaskSwitchContext+0xf0>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002280:	e065      	b.n	800234e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <vTaskSwitchContext+0xf0>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <vTaskSwitchContext+0xf4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	429a      	cmp	r2, r3
 800229e:	d111      	bne.n	80022c4 <vTaskSwitchContext+0x58>
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3304      	adds	r3, #4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10b      	bne.n	80022c4 <vTaskSwitchContext+0x58>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3308      	adds	r3, #8
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d105      	bne.n	80022c4 <vTaskSwitchContext+0x58>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	330c      	adds	r3, #12
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d008      	beq.n	80022d6 <vTaskSwitchContext+0x6a>
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <vTaskSwitchContext+0xf4>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <vTaskSwitchContext+0xf4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3334      	adds	r3, #52	; 0x34
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f001 ff2e 	bl	8004132 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <vTaskSwitchContext+0xf8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f1c3 031f 	rsb	r3, r3, #31
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	491e      	ldr	r1, [pc, #120]	; (8002368 <vTaskSwitchContext+0xfc>)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	e7fe      	b.n	8002312 <vTaskSwitchContext+0xa6>
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <vTaskSwitchContext+0xfc>)
 8002320:	4413      	add	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3308      	adds	r3, #8
 8002336:	429a      	cmp	r2, r3
 8002338:	d104      	bne.n	8002344 <vTaskSwitchContext+0xd8>
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <vTaskSwitchContext+0xf4>)
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20001dac 	.word	0x20001dac
 800235c:	20001d98 	.word	0x20001d98
 8002360:	20001cac 	.word	0x20001cac
 8002364:	20001d8c 	.word	0x20001d8c
 8002368:	20001cb0 	.word	0x20001cb0

0800236c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <vTaskPlaceOnEventList+0x24>
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e7fe      	b.n	800238e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <vTaskPlaceOnEventList+0x44>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3318      	adds	r3, #24
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fbfa 	bl	8000b92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800239e:	2101      	movs	r1, #1
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f000 fb19 	bl	80029d8 <prvAddCurrentTaskToDelayedList>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20001cac 	.word	0x20001cac

080023b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <vTaskPlaceOnEventListRestricted+0x26>
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e7fe      	b.n	80023d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <vTaskPlaceOnEventListRestricted+0x50>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3318      	adds	r3, #24
 80023e0:	4619      	mov	r1, r3
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7fe fbb1 	bl	8000b4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	68b8      	ldr	r0, [r7, #8]
 80023f8:	f000 faee 	bl	80029d8 <prvAddCurrentTaskToDelayedList>
	}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20001cac 	.word	0x20001cac

08002408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <xTaskRemoveFromEventList+0x2a>
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e7fe      	b.n	8002430 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	3318      	adds	r3, #24
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fbe4 	bl	8000c04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <xTaskRemoveFromEventList+0xac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11c      	bne.n	800247e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	3304      	adds	r3, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fbdb 	bl	8000c04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	2201      	movs	r2, #1
 8002454:	409a      	lsls	r2, r3
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <xTaskRemoveFromEventList+0xb0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <xTaskRemoveFromEventList+0xb0>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <xTaskRemoveFromEventList+0xb4>)
 800246e:	441a      	add	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7fe fb67 	bl	8000b4a <vListInsertEnd>
 800247c:	e005      	b.n	800248a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3318      	adds	r3, #24
 8002482:	4619      	mov	r1, r3
 8002484:	480e      	ldr	r0, [pc, #56]	; (80024c0 <xTaskRemoveFromEventList+0xb8>)
 8002486:	f7fe fb60 	bl	8000b4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <xTaskRemoveFromEventList+0xbc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	429a      	cmp	r2, r3
 8002496:	d905      	bls.n	80024a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <xTaskRemoveFromEventList+0xc0>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e001      	b.n	80024a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80024a8:	697b      	ldr	r3, [r7, #20]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20001dac 	.word	0x20001dac
 80024b8:	20001d8c 	.word	0x20001d8c
 80024bc:	20001cb0 	.word	0x20001cb0
 80024c0:	20001d44 	.word	0x20001d44
 80024c4:	20001cac 	.word	0x20001cac
 80024c8:	20001d98 	.word	0x20001d98

080024cc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <vTaskSetTimeOutState+0x22>
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e7fe      	b.n	80024ec <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <vTaskSetTimeOutState+0x40>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <vTaskSetTimeOutState+0x44>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	605a      	str	r2, [r3, #4]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20001d9c 	.word	0x20001d9c
 8002510:	20001d88 	.word	0x20001d88

08002514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <xTaskCheckForTimeOut+0x24>
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e7fe      	b.n	8002536 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <xTaskCheckForTimeOut+0x3e>
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e7fe      	b.n	8002550 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002552:	f7fe fc85 	bl	8000e60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <xTaskCheckForTimeOut+0xb4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d102      	bne.n	800256c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e026      	b.n	80025ba <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <xTaskCheckForTimeOut+0xb8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d007      	beq.n	8002588 <xTaskCheckForTimeOut+0x74>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	429a      	cmp	r2, r3
 8002580:	d802      	bhi.n	8002588 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002582:	2301      	movs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e018      	b.n	80025ba <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	1ad2      	subs	r2, r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d20e      	bcs.n	80025b6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1acb      	subs	r3, r1, r3
 80025a4:	441a      	add	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff8e 	bl	80024cc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e001      	b.n	80025ba <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80025ba:	f7fe fc7f 	bl	8000ebc <vPortExitCritical>

	return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20001d88 	.word	0x20001d88
 80025cc:	20001d9c 	.word	0x20001d9c

080025d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <vTaskMissedYield+0x14>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20001d98 	.word	0x20001d98

080025e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80025f0:	f000 f854 	bl	800269c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <prvIdleTask+0x2c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d907      	bls.n	800260c <prvIdleTask+0x24>
			{
				taskYIELD();
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <prvIdleTask+0x30>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800260c:	f001 fd97 	bl	800413e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002610:	e7ee      	b.n	80025f0 <prvIdleTask+0x8>
 8002612:	bf00      	nop
 8002614:	20001cb0 	.word	0x20001cb0
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	e00c      	b.n	8002642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <prvInitialiseTaskLists+0x60>)
 8002634:	4413      	add	r3, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fa5a 	bl	8000af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3301      	adds	r3, #1
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d9ef      	bls.n	8002628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002648:	480d      	ldr	r0, [pc, #52]	; (8002680 <prvInitialiseTaskLists+0x64>)
 800264a:	f7fe fa51 	bl	8000af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800264e:	480d      	ldr	r0, [pc, #52]	; (8002684 <prvInitialiseTaskLists+0x68>)
 8002650:	f7fe fa4e 	bl	8000af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <prvInitialiseTaskLists+0x6c>)
 8002656:	f7fe fa4b 	bl	8000af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800265a:	480c      	ldr	r0, [pc, #48]	; (800268c <prvInitialiseTaskLists+0x70>)
 800265c:	f7fe fa48 	bl	8000af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002660:	480b      	ldr	r0, [pc, #44]	; (8002690 <prvInitialiseTaskLists+0x74>)
 8002662:	f7fe fa45 	bl	8000af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <prvInitialiseTaskLists+0x78>)
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <prvInitialiseTaskLists+0x64>)
 800266a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <prvInitialiseTaskLists+0x7c>)
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <prvInitialiseTaskLists+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20001cb0 	.word	0x20001cb0
 8002680:	20001d14 	.word	0x20001d14
 8002684:	20001d28 	.word	0x20001d28
 8002688:	20001d44 	.word	0x20001d44
 800268c:	20001d58 	.word	0x20001d58
 8002690:	20001d70 	.word	0x20001d70
 8002694:	20001d3c 	.word	0x20001d3c
 8002698:	20001d40 	.word	0x20001d40

0800269c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026a2:	e028      	b.n	80026f6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80026a4:	f7ff fc64 	bl	8001f70 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <prvCheckTasksWaitingTermination+0x6c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80026b8:	f7ff fc68 	bl	8001f8c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d119      	bne.n	80026f6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80026c2:	f7fe fbcd 	bl	8000e60 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <prvCheckTasksWaitingTermination+0x6c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa96 	bl	8000c04 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <prvCheckTasksWaitingTermination+0x70>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <prvCheckTasksWaitingTermination+0x70>)
 80026e0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <prvCheckTasksWaitingTermination+0x74>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <prvCheckTasksWaitingTermination+0x74>)
 80026ea:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80026ec:	f7fe fbe6 	bl	8000ebc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f000 f80f 	bl	8002714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <prvCheckTasksWaitingTermination+0x74>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1d2      	bne.n	80026a4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20001d58 	.word	0x20001d58
 800270c:	20001d84 	.word	0x20001d84
 8002710:	20001d6c 	.word	0x20001d6c

08002714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fcf7 	bl	8001114 <vPortFree>
			vPortFree( pxTCB );
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fcf4 	bl	8001114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <prvResetNextTaskUnblockTime+0x44>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <prvResetNextTaskUnblockTime+0x14>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <prvResetNextTaskUnblockTime+0x16>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <prvResetNextTaskUnblockTime+0x48>)
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002756:	e008      	b.n	800276a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <prvResetNextTaskUnblockTime+0x44>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <prvResetNextTaskUnblockTime+0x48>)
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20001d3c 	.word	0x20001d3c
 800277c:	20001da4 	.word	0x20001da4

08002780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <xTaskGetSchedulerState+0x34>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800278e:	2301      	movs	r3, #1
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	e008      	b.n	80027a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <xTaskGetSchedulerState+0x38>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800279c:	2302      	movs	r3, #2
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	e001      	b.n	80027a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80027a6:	687b      	ldr	r3, [r7, #4]
	}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20001d90 	.word	0x20001d90
 80027b8:	20001dac 	.word	0x20001dac

080027bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d062      	beq.n	8002894 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <vTaskPriorityInherit+0xe0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d25b      	bcs.n	8002894 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db06      	blt.n	80027f2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <vTaskPriorityInherit+0xe0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f1c3 0205 	rsb	r2, r3, #5
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6959      	ldr	r1, [r3, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <vTaskPriorityInherit+0xe4>)
 8002804:	4413      	add	r3, r2
 8002806:	4299      	cmp	r1, r3
 8002808:	d101      	bne.n	800280e <vTaskPriorityInherit+0x52>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <vTaskPriorityInherit+0x54>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03a      	beq.n	800288a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3304      	adds	r3, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe f9f3 	bl	8000c04 <uxListRemove>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d115      	bne.n	8002850 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	491d      	ldr	r1, [pc, #116]	; (80028a0 <vTaskPriorityInherit+0xe4>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <vTaskPriorityInherit+0x94>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	2201      	movs	r2, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43da      	mvns	r2, r3
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <vTaskPriorityInherit+0xe8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4013      	ands	r3, r2
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <vTaskPriorityInherit+0xe8>)
 800284e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <vTaskPriorityInherit+0xe0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	2201      	movs	r2, #1
 8002860:	409a      	lsls	r2, r3
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <vTaskPriorityInherit+0xe8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <vTaskPriorityInherit+0xe8>)
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <vTaskPriorityInherit+0xe4>)
 800287a:	441a      	add	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7fe f961 	bl	8000b4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002888:	e004      	b.n	8002894 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <vTaskPriorityInherit+0xe0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20001cac 	.word	0x20001cac
 80028a0:	20001cb0 	.word	0x20001cb0
 80028a4:	20001d8c 	.word	0x20001d8c

080028a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d06c      	beq.n	8002998 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <xTaskPriorityDisinherit+0xfc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d009      	beq.n	80028dc <xTaskPriorityDisinherit+0x34>
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e7fe      	b.n	80028da <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <xTaskPriorityDisinherit+0x50>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	e7fe      	b.n	80028f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	429a      	cmp	r2, r3
 800290c:	d044      	beq.n	8002998 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	2b00      	cmp	r3, #0
 8002914:	d140      	bne.n	8002998 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	3304      	adds	r3, #4
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f972 	bl	8000c04 <uxListRemove>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d115      	bne.n	8002952 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292a:	491f      	ldr	r1, [pc, #124]	; (80029a8 <xTaskPriorityDisinherit+0x100>)
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xTaskPriorityDisinherit+0xaa>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <xTaskPriorityDisinherit+0x104>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4013      	ands	r3, r2
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <xTaskPriorityDisinherit+0x104>)
 8002950:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f1c3 0205 	rsb	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	2201      	movs	r2, #1
 800296c:	409a      	lsls	r2, r3
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <xTaskPriorityDisinherit+0x104>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <xTaskPriorityDisinherit+0x104>)
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <xTaskPriorityDisinherit+0x100>)
 8002986:	441a      	add	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7fe f8db 	bl	8000b4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002994:	2301      	movs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002998:	697b      	ldr	r3, [r7, #20]
	}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001cac 	.word	0x20001cac
 80029a8:	20001cb0 	.word	0x20001cb0
 80029ac:	20001d8c 	.word	0x20001d8c

080029b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c2:	3201      	adds	r2, #1
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80029c8:	681b      	ldr	r3, [r3, #0]
	}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	20001cac 	.word	0x20001cac

080029d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <prvAddCurrentTaskToDelayedList+0xb0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f908 	bl	8000c04 <uxListRemove>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d10a      	bne.n	8002a30 <prvAddCurrentTaskToDelayedList+0x58>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3304      	adds	r3, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	481a      	ldr	r0, [pc, #104]	; (8002a94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a2a:	f7fe f88e 	bl	8000b4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a2e:	e026      	b.n	8002a7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d209      	bcs.n	8002a5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3304      	adds	r3, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fe f89c 	bl	8000b92 <vListInsert>
}
 8002a5a:	e010      	b.n	8002a7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe f892 	bl	8000b92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d202      	bcs.n	8002a7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20001d88 	.word	0x20001d88
 8002a8c:	20001cac 	.word	0x20001cac
 8002a90:	20001d8c 	.word	0x20001d8c
 8002a94:	20001d70 	.word	0x20001d70
 8002a98:	20001d40 	.word	0x20001d40
 8002a9c:	20001d3c 	.word	0x20001d3c
 8002aa0:	20001da4 	.word	0x20001da4

08002aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002aae:	f000 fafb 	bl	80030a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <xTimerCreateTimerTask+0x54>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <xTimerCreateTimerTask+0x58>)
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2303      	movs	r3, #3
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ac8:	490d      	ldr	r1, [pc, #52]	; (8002b00 <xTimerCreateTimerTask+0x5c>)
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <xTimerCreateTimerTask+0x60>)
 8002acc:	f7ff f89e 	bl	8001c0c <xTaskCreate>
 8002ad0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <xTimerCreateTimerTask+0x48>
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	e7fe      	b.n	8002aea <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20001de0 	.word	0x20001de0
 8002afc:	20001de4 	.word	0x20001de4
 8002b00:	08004f00 	.word	0x08004f00
 8002b04:	08002cf9 	.word	0x08002cf9

08002b08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002b16:	2028      	movs	r0, #40	; 0x28
 8002b18:	f7fe fab2 	bl	8001080 <pvPortMalloc>
 8002b1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f805 	bl	8002b42 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002b38:	697b      	ldr	r3, [r7, #20]
	}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <prvInitialiseNewTimer+0x28>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e7fe      	b.n	8002b68 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002b70:	f000 fa9a 	bl	80030a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	3304      	adds	r3, #4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd ffca 	bl	8000b30 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <xTimerGenericCommand+0x2c>
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	e7fe      	b.n	8002bce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <xTimerGenericCommand+0x94>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02a      	beq.n	8002c2e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	dc18      	bgt.n	8002c1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002bea:	f7ff fdc9 	bl	8002780 <xTaskGetSchedulerState>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d109      	bne.n	8002c08 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <xTimerGenericCommand+0x94>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	f107 0114 	add.w	r1, r7, #20
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c00:	f7fe fb6e 	bl	80012e0 <xQueueGenericSend>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24
 8002c06:	e012      	b.n	8002c2e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <xTimerGenericCommand+0x94>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f107 0114 	add.w	r1, r7, #20
 8002c10:	2300      	movs	r3, #0
 8002c12:	2200      	movs	r2, #0
 8002c14:	f7fe fb64 	bl	80012e0 <xQueueGenericSend>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24
 8002c1a:	e008      	b.n	8002c2e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <xTimerGenericCommand+0x94>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	f107 0114 	add.w	r1, r7, #20
 8002c24:	2300      	movs	r3, #0
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	f7fe fc54 	bl	80014d4 <xQueueGenericSendFromISR>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20001de0 	.word	0x20001de0

08002c3c <xTimerGetExpiryTime>:
	return pxTimer->xTimerPeriodInTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer = ( Timer_t * ) xTimer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <xTimerGetExpiryTime+0x26>
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e7fe      	b.n	8002c60 <xTimerGetExpiryTime+0x24>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	613b      	str	r3, [r7, #16]
	return xReturn;
 8002c68:	693b      	ldr	r3, [r7, #16]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <prvProcessExpiredTimer+0x7c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd ffb7 	bl	8000c04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d121      	bne.n	8002ce2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	18d1      	adds	r1, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f000 f8c8 	bl	8002e40 <prvInsertTimerInActiveList>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7ff ff6f 	bl	8002ba4 <xTimerGenericCommand>
 8002cc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <prvProcessExpiredTimer+0x6a>
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e7fe      	b.n	8002ce0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	4798      	blx	r3
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001dd8 	.word	0x20001dd8

08002cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f857 	bl	8002db8 <prvGetNextExpireTime>
 8002d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f803 	bl	8002d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002d16:	f000 f8d5 	bl	8002ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002d1a:	e7f1      	b.n	8002d00 <prvTimerTask+0x8>

08002d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002d26:	f7ff f923 	bl	8001f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f866 	bl	8002e00 <prvSampleTimeNow>
 8002d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d130      	bne.n	8002d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <prvProcessTimerOrBlockTask+0x3c>
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d806      	bhi.n	8002d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002d4a:	f7ff f91f 	bl	8001f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff91 	bl	8002c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002d56:	e024      	b.n	8002da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <prvProcessTimerOrBlockTask+0x90>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <prvProcessTimerOrBlockTask+0x94>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fe ff11 	bl	8001ba4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002d82:	f7ff f903 	bl	8001f8c <xTaskResumeAll>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <prvProcessTimerOrBlockTask+0x98>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	f3bf 8f6f 	isb	sy
}
 8002d9c:	e001      	b.n	8002da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002d9e:	f7ff f8f5 	bl	8001f8c <xTaskResumeAll>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20001ddc 	.word	0x20001ddc
 8002db0:	20001de0 	.word	0x20001de0
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <prvGetNextExpireTime+0x44>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <prvGetNextExpireTime+0x44>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e001      	b.n	8002dee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20001dd8 	.word	0x20001dd8

08002e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002e08:	f7ff f95c 	bl	80020c4 <xTaskGetTickCount>
 8002e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <prvSampleTimeNow+0x3c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d205      	bcs.n	8002e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002e18:	f000 f8e6 	bl	8002fe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e002      	b.n	8002e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <prvSampleTimeNow+0x3c>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20001de8 	.word	0x20001de8

08002e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d812      	bhi.n	8002e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	1ad2      	subs	r2, r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d302      	bcc.n	8002e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e01b      	b.n	8002eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <prvInsertTimerInActiveList+0x7c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7fd fe84 	bl	8000b92 <vListInsert>
 8002e8a:	e012      	b.n	8002eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d206      	bcs.n	8002ea2 <prvInsertTimerInActiveList+0x62>
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e007      	b.n	8002eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <prvInsertTimerInActiveList+0x80>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fd fe70 	bl	8000b92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002eb2:	697b      	ldr	r3, [r7, #20]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20001ddc 	.word	0x20001ddc
 8002ec0:	20001dd8 	.word	0x20001dd8

08002ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002eca:	e07a      	b.n	8002fc2 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db77      	blt.n	8002fc2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fe8e 	bl	8000c04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff88 	bl	8002e00 <prvSampleTimeNow>
 8002ef0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d863      	bhi.n	8002fc0 <prvProcessReceivedCommands+0xfc>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <prvProcessReceivedCommands+0x3c>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	08002f29 	.word	0x08002f29
 8002f08:	08002f29 	.word	0x08002f29
 8002f0c:	08002fc3 	.word	0x08002fc3
 8002f10:	08002f83 	.word	0x08002f83
 8002f14:	08002fb9 	.word	0x08002fb9
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f29 	.word	0x08002f29
 8002f20:	08002fc3 	.word	0x08002fc3
 8002f24:	08002f83 	.word	0x08002f83
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	18d1      	adds	r1, r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f36:	f7ff ff83 	bl	8002e40 <prvInsertTimerInActiveList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d040      	beq.n	8002fc2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f46:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d138      	bne.n	8002fc2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	441a      	add	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f62:	f7ff fe1f 	bl	8002ba4 <xTimerGenericCommand>
 8002f66:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d129      	bne.n	8002fc2 <prvProcessReceivedCommands+0xfe>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e7fe      	b.n	8002f80 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <prvProcessReceivedCommands+0xe0>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e7fe      	b.n	8002fa2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	18d1      	adds	r1, r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fb2:	f7ff ff45 	bl	8002e40 <prvInsertTimerInActiveList>
					break;
 8002fb6:	e004      	b.n	8002fc2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fba:	f7fe f8ab 	bl	8001114 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002fbe:	e000      	b.n	8002fc2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002fc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <prvProcessReceivedCommands+0x120>)
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	f107 0108 	add.w	r1, r7, #8
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f7fe fb9f 	bl	8001710 <xQueueGenericReceive>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f af79 	bne.w	8002ecc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20001de0 	.word	0x20001de0

08002fe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fee:	e044      	b.n	800307a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3304      	adds	r3, #4
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fdfb 	bl	8000c04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	6938      	ldr	r0, [r7, #16]
 8003014:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d12d      	bne.n	800307a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d90e      	bls.n	800304e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f7fd fda3 	bl	8000b92 <vListInsert>
 800304c:	e015      	b.n	800307a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	2100      	movs	r1, #0
 8003058:	6938      	ldr	r0, [r7, #16]
 800305a:	f7ff fda3 	bl	8002ba4 <xTimerGenericCommand>
 800305e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <prvSwitchTimerLists+0x92>
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	e7fe      	b.n	8003078 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1b5      	bne.n	8002ff0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <prvSwitchTimerLists+0xbc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <prvSwitchTimerLists+0xb8>)
 8003090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <prvSwitchTimerLists+0xbc>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20001dd8 	.word	0x20001dd8
 80030a4:	20001ddc 	.word	0x20001ddc

080030a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80030ac:	f7fd fed8 	bl	8000e60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <prvCheckForValidListAndQueue+0x54>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80030b8:	4811      	ldr	r0, [pc, #68]	; (8003100 <prvCheckForValidListAndQueue+0x58>)
 80030ba:	f7fd fd19 	bl	8000af0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80030be:	4811      	ldr	r0, [pc, #68]	; (8003104 <prvCheckForValidListAndQueue+0x5c>)
 80030c0:	f7fd fd16 	bl	8000af0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <prvCheckForValidListAndQueue+0x60>)
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <prvCheckForValidListAndQueue+0x58>)
 80030c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <prvCheckForValidListAndQueue+0x64>)
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <prvCheckForValidListAndQueue+0x5c>)
 80030ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80030d0:	2200      	movs	r2, #0
 80030d2:	210c      	movs	r1, #12
 80030d4:	2005      	movs	r0, #5
 80030d6:	f7fe f8ab 	bl	8001230 <xQueueGenericCreate>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <prvCheckForValidListAndQueue+0x54>)
 80030de:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <prvCheckForValidListAndQueue+0x54>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <prvCheckForValidListAndQueue+0x54>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4908      	ldr	r1, [pc, #32]	; (8003110 <prvCheckForValidListAndQueue+0x68>)
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fd30 	bl	8001b54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030f4:	f7fd fee2 	bl	8000ebc <vPortExitCritical>
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20001de0 	.word	0x20001de0
 8003100:	20001db0 	.word	0x20001db0
 8003104:	20001dc4 	.word	0x20001dc4
 8003108:	20001dd8 	.word	0x20001dd8
 800310c:	20001ddc 	.word	0x20001ddc
 8003110:	08004f08 	.word	0x08004f08

08003114 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8003118:	2101      	movs	r1, #1
 800311a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800311e:	f000 fb7d 	bl	800381c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8003122:	2100      	movs	r1, #0
 8003124:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003128:	f000 fb78 	bl	800381c <RCC_APB2PeriphResetCmd>
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800314e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003152:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800315e:	4313      	orrs	r3, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <ADC_Init+0xa8>)
 8003176:	4013      	ands	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003182:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003188:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003190:	4313      	orrs	r3, r2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	7d1b      	ldrb	r3, [r3, #20]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	051b      	lsls	r3, r3, #20
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	c0fff7fd 	.word	0xc0fff7fd

080031dc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80031fa:	e005      	b.n	8003208 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 0201 	bic.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	70fb      	strb	r3, [r7, #3]
 8003226:	460b      	mov	r3, r1
 8003228:	70bb      	strb	r3, [r7, #2]
 800322a:	4613      	mov	r3, r2
 800322c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d923      	bls.n	8003284 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f1a3 020a 	sub.w	r2, r3, #10
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	2207      	movs	r2, #7
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	43db      	mvns	r3, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003260:	7879      	ldrb	r1, [r7, #1]
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f1a3 020a 	sub.w	r2, r3, #10
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e01e      	b.n	80032c2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	43db      	mvns	r3, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80032a4:	7879      	ldrb	r1, [r7, #1]
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d821      	bhi.n	800330c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80032ce:	78bb      	ldrb	r3, [r7, #2]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	221f      	movs	r2, #31
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80032ea:	78f9      	ldrb	r1, [r7, #3]
 80032ec:	78bb      	ldrb	r3, [r7, #2]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800330a:	e047      	b.n	800339c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800330c:	78bb      	ldrb	r3, [r7, #2]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d821      	bhi.n	8003356 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8003318:	78bb      	ldrb	r3, [r7, #2]
 800331a:	1fda      	subs	r2, r3, #7
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	221f      	movs	r2, #31
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	43db      	mvns	r3, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8003334:	78f9      	ldrb	r1, [r7, #3]
 8003336:	78bb      	ldrb	r3, [r7, #2]
 8003338:	1fda      	subs	r2, r3, #7
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003354:	e022      	b.n	800339c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800335c:	78bb      	ldrb	r3, [r7, #2]
 800335e:	f1a3 020d 	sub.w	r2, r3, #13
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	221f      	movs	r2, #31
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	43db      	mvns	r3, r3
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800337a:	78f9      	ldrb	r1, [r7, #3]
 800337c:	78bb      	ldrb	r3, [r7, #2]
 800337e:	f1a3 020d 	sub.w	r2, r3, #13
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	b29b      	uxth	r3, r3
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e001      	b.n	8003408 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <DAC_SetChannel1Data+0x34>)
 800342a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3308      	adds	r3, #8
 8003434:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	461a      	mov	r2, r3
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	6013      	str	r3, [r2, #0]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40007400 	.word	0x40007400

08003450 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <DMA_Init+0xac>)
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800347a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003486:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003492:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800349e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4313      	orrs	r3, r2
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60da      	str	r2, [r3, #12]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	f01c803f 	.word	0xf01c803f

08003500 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800351e:	e005      	b.n	800352c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0201 	bic.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e001      	b.n	800355a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <DMA_GetFlagStatus+0x6c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <DMA_GetFlagStatus+0x70>)
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e001      	b.n	800358c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <DMA_GetFlagStatus+0x74>)
 800358a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e002      	b.n	80035a4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80035aa:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
 80035be:	e001      	b.n	80035c4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	4002640f 	.word	0x4002640f
 80035d8:	40026000 	.word	0x40026000
 80035dc:	40026400 	.word	0x40026400

080035e0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a10      	ldr	r2, [pc, #64]	; (8003630 <DMA_ClearFlag+0x50>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d802      	bhi.n	80035f8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <DMA_ClearFlag+0x54>)
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e001      	b.n	80035fc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <DMA_ClearFlag+0x58>)
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800360c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8003614:	e006      	b.n	8003624 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800361c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6093      	str	r3, [r2, #8]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	4002640f 	.word	0x4002640f
 8003634:	40026000 	.word	0x40026000
 8003638:	40026400 	.word	0x40026400

0800363c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e076      	b.n	8003746 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003658:	2201      	movs	r2, #1
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d165      	bne.n	8003740 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2103      	movs	r1, #3
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	401a      	ands	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	791b      	ldrb	r3, [r3, #4]
 8003692:	4619      	mov	r1, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	791b      	ldrb	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d003      	beq.n	80036b2 <GPIO_Init+0x76>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d12e      	bne.n	8003710 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2103      	movs	r1, #3
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	795b      	ldrb	r3, [r3, #5]
 80036d0:	4619      	mov	r1, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	2301      	movs	r3, #1
 80036ec:	408b      	lsls	r3, r1
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	7992      	ldrb	r2, [r2, #6]
 80036fe:	4611      	mov	r1, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	b292      	uxth	r2, r2
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	b292      	uxth	r2, r2
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	b29b      	uxth	r3, r3
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2103      	movs	r1, #3
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	401a      	ands	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	79db      	ldrb	r3, [r3, #7]
 8003730:	4619      	mov	r1, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d985      	bls.n	8003658 <GPIO_Init+0x1c>
    }
  }
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	615a      	str	r2, [r3, #20]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	405a      	eors	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	615a      	str	r2, [r3, #20]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80037b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80037ba:	e006      	b.n	80037ca <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80037c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	4013      	ands	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <RCC_APB2PeriphClockCmd+0x3c>)
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <RCC_APB2PeriphClockCmd+0x3c>)
 80037f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80037fa:	e006      	b.n	800380a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80037fc:	4906      	ldr	r1, [pc, #24]	; (8003818 <RCC_APB2PeriphClockCmd+0x3c>)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <RCC_APB2PeriphClockCmd+0x3c>)
 8003800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	43db      	mvns	r3, r3
 8003806:	4013      	ands	r3, r2
 8003808:	644b      	str	r3, [r1, #68]	; 0x44
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <RCC_APB2PeriphResetCmd+0x3c>)
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <RCC_APB2PeriphResetCmd+0x3c>)
 8003832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4313      	orrs	r3, r2
 8003838:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800383a:	e006      	b.n	800384a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800383c:	4906      	ldr	r1, [pc, #24]	; (8003858 <RCC_APB2PeriphResetCmd+0x3c>)
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <RCC_APB2PeriphResetCmd+0x3c>)
 8003840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	43db      	mvns	r3, r3
 8003846:	4013      	ands	r3, r2
 8003848:	624b      	str	r3, [r1, #36]	; 0x24
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	819a      	strh	r2, [r3, #12]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	891b      	ldrh	r3, [r3, #8]
 800388e:	b29a      	uxth	r2, r3
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	4013      	ands	r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e001      	b.n	80038a4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <Audio_MAL_IRQHandler+0xec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f7ff fe50 	bl	8003568 <DMA_GetFlagStatus>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d064      	beq.n	8003998 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04c      	beq.n	8003970 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80038d6:	bf00      	nop
 80038d8:	4b30      	ldr	r3, [pc, #192]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fe2b 	bl	8003538 <DMA_GetCmdStatus>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f7      	bne.n	80038d8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <Audio_MAL_IRQHandler+0xec>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7ff fe74 	bl	80035e0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <Audio_MAL_IRQHandler+0xf4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <Audio_MAL_IRQHandler+0xf8>)
 8003900:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390a:	4293      	cmp	r3, r2
 800390c:	bf28      	it	cs
 800390e:	4613      	movcs	r3, r2
 8003910:	4a26      	ldr	r2, [pc, #152]	; (80039ac <Audio_MAL_IRQHandler+0xf8>)
 8003912:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4924      	ldr	r1, [pc, #144]	; (80039ac <Audio_MAL_IRQHandler+0xf8>)
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fd98 	bl	8003450 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fdea 	bl	8003500 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <Audio_MAL_IRQHandler+0xf4>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d203      	bcs.n	8003942 <Audio_MAL_IRQHandler+0x8e>
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	e000      	b.n	8003944 <Audio_MAL_IRQHandler+0x90>
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <Audio_MAL_IRQHandler+0xfc>)
 8003944:	4413      	add	r3, r2
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <Audio_MAL_IRQHandler+0xf4>)
 8003948:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003956:	428b      	cmp	r3, r1
 8003958:	bf28      	it	cs
 800395a:	460b      	movcs	r3, r1
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <Audio_MAL_IRQHandler+0xf0>)
 8003960:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fdc9 	bl	8003500 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800396e:	e013      	b.n	8003998 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fdc2 	bl	8003500 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <Audio_MAL_IRQHandler+0xe8>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <Audio_MAL_IRQHandler+0xec>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7ff fe2a 	bl	80035e0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <Audio_MAL_IRQHandler+0xf4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f83c 	bl	8003a10 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	20000010 	.word	0x20000010
 80039a4:	20000004 	.word	0x20000004
 80039a8:	20001e48 	.word	0x20001e48
 80039ac:	20001e88 	.word	0x20001e88
 80039b0:	0001fffe 	.word	0x0001fffe

080039b4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80039b8:	f7ff ff7c 	bl	80038b4 <Audio_MAL_IRQHandler>
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80039c4:	f7ff ff76 	bl	80038b4 <Audio_MAL_IRQHandler>
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80039d0:	2102      	movs	r1, #2
 80039d2:	480d      	ldr	r0, [pc, #52]	; (8003a08 <SPI3_IRQHandler+0x3c>)
 80039d4:	f7ff ff51 	bl	800387a <SPI_I2S_GetFlagStatus>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d011      	beq.n	8003a02 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <SPI3_IRQHandler+0x40>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d106      	bne.n	80039f4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80039e6:	f000 f81e 	bl	8003a26 <EVAL_AUDIO_GetSampleCallBack>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4619      	mov	r1, r3
 80039ee:	2004      	movs	r0, #4
 80039f0:	f7ff fd12 	bl	8003418 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80039f4:	f000 f817 	bl	8003a26 <EVAL_AUDIO_GetSampleCallBack>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4619      	mov	r1, r3
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <SPI3_IRQHandler+0x3c>)
 80039fe:	f7ff ff2d 	bl	800385c <SPI_I2S_SendData>
  }
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003c00 	.word	0x40003c00
 8003a0c:	20000008 	.word	0x20000008

08003a10 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003a1a:	bf00      	nop
}
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <writeBoard>:
/* #####- writeBoard -#####
 * Write vehicles and traffic light LEDs based on state
 * ## params:
 * boardState - state of LEDs on board
 */
void writeBoard(BoardState boardState) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<32;i++){
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e013      	b.n	8003a6e <writeBoard+0x36>
		uint32_t nextBit = 0x1 & (boardState >> i);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
		GPIO_Write(GPIOB, nextBit);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4808      	ldr	r0, [pc, #32]	; (8003a7c <writeBoard+0x44>)
 8003a5c:	f7ff fe7c 	bl	8003758 <GPIO_Write>

		GPIO_ToggleBits(GPIOB, GPIO_Pin_1);
 8003a60:	2102      	movs	r1, #2
 8003a62:	4806      	ldr	r0, [pc, #24]	; (8003a7c <writeBoard+0x44>)
 8003a64:	f7ff fe87 	bl	8003776 <GPIO_ToggleBits>
	for(int i = 0; i<32;i++){
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b1f      	cmp	r3, #31
 8003a72:	dde8      	ble.n	8003a46 <writeBoard+0xe>
	}
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40020400 	.word	0x40020400

08003a80 <Get_ADC_Converted_Value>:

/* #####- readFlow -#####
 * Read in flow value from potentiometer
 */
uint16_t Get_ADC_Converted_Value()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  ADC_SoftwareStartConv(ADC1);
 8003a84:	4808      	ldr	r0, [pc, #32]	; (8003aa8 <Get_ADC_Converted_Value+0x28>)
 8003a86:	f7ff fc8f 	bl	80033a8 <ADC_SoftwareStartConv>
  while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 8003a8a:	bf00      	nop
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <Get_ADC_Converted_Value+0x28>)
 8003a90:	f7ff fca7 	bl	80033e2 <ADC_GetFlagStatus>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <Get_ADC_Converted_Value+0x24>
  {
    return ADC_GetConversionValue(ADC1);
 8003a9a:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <Get_ADC_Converted_Value+0x28>)
 8003a9c:	f7ff fc94 	bl	80033c8 <ADC_GetConversionValue>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	e7ff      	b.n	8003aa4 <Get_ADC_Converted_Value+0x24>
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40012000 	.word	0x40012000

08003aac <readFlow>:
uint16_t readFlow() {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
//	Read value from FLOW_PIN
	uint16_t ConvertedValue = Get_ADC_Converted_Value();
 8003ab2:	f7ff ffe5 	bl	8003a80 <Get_ADC_Converted_Value>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
	return ConvertedValue;
 8003aba:	88fb      	ldrh	r3, [r7, #6]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <advVehicles>:
 * incomingVehicle - vehicle entering intersection
 * boardState - state of lights on board
 * ## returns:
 * BoardState - new state of board after advancing vehicles
 */
BoardState advVehicles(Vehicle incomingVehicle, BoardState boardState) {
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
	// Build bit for incoming vehicle
	uint32_t topVeh;
	if (incomingVehicle == TRUE) {
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d103      	bne.n	8003ade <advVehicles+0x1a>
		topVeh = 0x80000000;
 8003ad6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e004      	b.n	8003ae8 <advVehicles+0x24>
	} else if (incomingVehicle == FALSE) {
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <advVehicles+0x24>
		topVeh = 0x00000000;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
	}

	// Build new boardState
	return 0x00000000
			| (VEHICLE_MASK & (boardState >> 1))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003af0:	f023 031f 	bic.w	r3, r3, #31
			| (LIGHT_MASK & boardState)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003afa:	431a      	orrs	r2, r3
			| topVeh;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	0000      	movs	r0, r0
	...

08003b10 <stickyAdvVehicles>:
 * incomingVehicle - vehicle entering intersection
 * boardState - state of lights on board
 * ## returns:
 * BoardState - new state of board after advancing vehicles
 */
BoardState stickyAdvVehicles(Vehicle incomingVehicle, BoardState boardState) {
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	6039      	str	r1, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
	// Build bit for incoming vehicle
	uint32_t topVeh;
	if (incomingVehicle == TRUE) {
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d103      	bne.n	8003b2a <stickyAdvVehicles+0x1a>
		topVeh = 0x80000000;
 8003b22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e004      	b.n	8003b34 <stickyAdvVehicles+0x24>
	} else if (incomingVehicle == FALSE) {
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <stickyAdvVehicles+0x24>
		topVeh = 0x00000000;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
	}

	// Find rightmost 0 in vehicles before light
	// Set all leftwards bits to 1s
	uint32_t stopLoc = (boardState | ~QUEUE_MASK);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8003b3a:	613b      	str	r3, [r7, #16]
	// Finds lest significant zero
	stopLoc = ~stopLoc & (stopLoc+1);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
	// Get value of position
	stopLoc = (int)log2(stopLoc) & 0xFF;
 8003b48:	6938      	ldr	r0, [r7, #16]
 8003b4a:	f7fc fc83 	bl	8000454 <__aeabi_ui2d>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	4618      	mov	r0, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	f000 fe1b 	bl	8004790 <log>
 8003b5a:	a322      	add	r3, pc, #136	; (adr r3, 8003be4 <stickyAdvVehicles+0xd4>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fe18 	bl	8000794 <__aeabi_ddiv>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	f7fc ff98 	bl	8000aa0 <__aeabi_d2iz>
 8003b70:	4603      	mov	r3, r0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	613b      	str	r3, [r7, #16]
	if (stopLoc == 0) {
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <stickyAdvVehicles+0x70>
		stopLoc = 32;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	613b      	str	r3, [r7, #16]
	}

	// Create mask for just those vehicles before the light with room to move ahead
	uint32_t dynMask = 0x00000000;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
	for (int i=0; i < 32-stopLoc; i++) {
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	e007      	b.n	8003b9a <stickyAdvVehicles+0x8a>
		dynMask = ((dynMask >> 1) | 0x80000000);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b92:	60fb      	str	r3, [r7, #12]
	for (int i=0; i < 32-stopLoc; i++) {
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f1c3 0220 	rsb	r2, r3, #32
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d8f1      	bhi.n	8003b8a <stickyAdvVehicles+0x7a>
	}

	// Build new boardState
	return 0x00000000
			| ((dynMask & boardState) >> 1)
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4013      	ands	r3, r2
 8003bac:	085a      	lsrs	r2, r3, #1
			| (~dynMask & QUEUE_MASK & boardState)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43d9      	mvns	r1, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bba:	431a      	orrs	r2, r3
			| (PAST_MASK & ((PAST_MASK & boardState) >> 1))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	0859      	lsrs	r1, r3, #1
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <stickyAdvVehicles+0xd0>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	431a      	orrs	r2, r3
			| (LIGHT_MASK & boardState)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003bcc:	431a      	orrs	r2, r3
			| topVeh;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2

}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	f3af 8000 	nop.w
 8003be0:	007fe000 	.word	0x007fe000
 8003be4:	fefa39ef 	.word	0xfefa39ef
 8003be8:	3fe62e42 	.word	0x3fe62e42

08003bec <changeLightColor>:
 * lightColor - color of light to change to
 * boardState - state of lights on board
 * ## returns:
 * BoardState - new state of board after changing color of light
 */
BoardState changeLightColor(LightColor lightColor, BoardState boardState) {
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	71fb      	strb	r3, [r7, #7]
	uint32_t nxtLight;
	if (lightColor == GREEN) {
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <changeLightColor+0x1a>
		nxtLight = LIGHT_GREEN;
 8003bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e00c      	b.n	8003c20 <changeLightColor+0x34>
	} else if (lightColor == YELLOW) {
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d103      	bne.n	8003c14 <changeLightColor+0x28>
		nxtLight = LIGHT_YELLOW;
 8003c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e005      	b.n	8003c20 <changeLightColor+0x34>
	} else if (lightColor == RED) {
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <changeLightColor+0x34>
		nxtLight = LIGHT_RED;
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	60fb      	str	r3, [r7, #12]
	}

	return 0x00000000
			| (~LIGHT_MASK & boardState)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
			| nxtLight;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af02      	add	r7, sp, #8

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8003c86:	f000 fa67 	bl	8004158 <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,			/* The number of items the queue can hold. */
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f7fd face 	bl	8001230 <xQueueGenericCreate>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <main+0xf0>)
 8003c98:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );		/* The size of each item the queue holds. */

	xFlowQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7fd fac6 	bl	8001230 <xQueueGenericCreate>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <main+0xf4>)
 8003ca8:	601a      	str	r2, [r3, #0]
								sizeof( uint16_t ) );	/* The size of each item the queue holds. */

	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <main+0xf0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4932      	ldr	r1, [pc, #200]	; (8003d78 <main+0xf8>)
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fd ff4f 	bl	8001b54 <vQueueAddToRegistry>
	vQueueAddToRegistry( xFlowQueue, "FlowQueue" );
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <main+0xf4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4930      	ldr	r1, [pc, #192]	; (8003d7c <main+0xfc>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd ff49 	bl	8001b54 <vQueueAddToRegistry>

	u_int16_t defaultFlow = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	80fb      	strh	r3, [r7, #6]
	u_int32_t defaultBoardState = (0x00000000 | LIGHT_RED);
 8003cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cca:	603b      	str	r3, [r7, #0]
	xQueueSend( xFlowQueue, &defaultFlow, 0);
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <main+0xf4>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	1db9      	adds	r1, r7, #6
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f7fd fb03 	bl	80012e0 <xQueueGenericSend>
	xQueueSend( xQueue, &defaultBoardState, 0);
 8003cda:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <main+0xf0>)
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	4639      	mov	r1, r7
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f7fd fafc 	bl	80012e0 <xQueueGenericSend>

	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 8003ce8:	2203      	movs	r2, #3
 8003cea:	2100      	movs	r1, #0
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7fd fa9f 	bl	8001230 <xQueueGenericCreate>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <main+0x100>)
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <main+0x100>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <main+0x8e>
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <main+0x100>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f7fd fae9 	bl	80012e0 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <main+0x100>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	491c      	ldr	r1, [pc, #112]	; (8003d84 <main+0x104>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd ff1d 	bl	8001b54 <vQueueAddToRegistry>

	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */

	xTaskCreate(prvTrafficFlowAdjustment,			/* The function that implements the task. */
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2302      	movs	r3, #2
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	2282      	movs	r2, #130	; 0x82
 8003d26:	4918      	ldr	r1, [pc, #96]	; (8003d88 <main+0x108>)
 8003d28:	4818      	ldr	r0, [pc, #96]	; (8003d8c <main+0x10c>)
 8003d2a:	f7fd ff6f 	bl	8001c0c <xTaskCreate>
				configMINIMAL_STACK_SIZE, 			/* The size (in words) of the stack that should be created for the task. */
				NULL, 								/* A parameter that can be passed into the task.  Not used in this simple demo. */
				mainQUEUE_RECEIVE_TASK_PRIORITY,	/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
				NULL );								/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	xTaskCreate(prvTrafficCreator,					/* The function that implements the task. */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	2302      	movs	r3, #2
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	2282      	movs	r2, #130	; 0x82
 8003d3a:	4915      	ldr	r1, [pc, #84]	; (8003d90 <main+0x110>)
 8003d3c:	4815      	ldr	r0, [pc, #84]	; (8003d94 <main+0x114>)
 8003d3e:	f7fd ff65 	bl	8001c0c <xTaskCreate>
				configMINIMAL_STACK_SIZE, 			/* The size (in words) of the stack that should be created for the task. */
				NULL, 								/* A parameter that can be passed into the task.  Not used in this simple demo. */
				mainQUEUE_RECEIVE_TASK_PRIORITY,	/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
				NULL );								/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	xTaskCreate(prvTrafficLight,					/* The function that implements the task. */
 8003d42:	2300      	movs	r3, #0
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2302      	movs	r3, #2
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2282      	movs	r2, #130	; 0x82
 8003d4e:	4912      	ldr	r1, [pc, #72]	; (8003d98 <main+0x118>)
 8003d50:	4812      	ldr	r0, [pc, #72]	; (8003d9c <main+0x11c>)
 8003d52:	f7fd ff5b 	bl	8001c0c <xTaskCreate>
				configMINIMAL_STACK_SIZE, 			/* The size (in words) of the stack that should be created for the task. */
				NULL, 								/* A parameter that can be passed into the task.  Not used in this simple demo. */
				mainQUEUE_RECEIVE_TASK_PRIORITY,	/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
				NULL );								/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	xTaskCreate(prvDisplayBoard,					/* The function that implements the task. */
 8003d56:	2300      	movs	r3, #0
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2282      	movs	r2, #130	; 0x82
 8003d62:	490f      	ldr	r1, [pc, #60]	; (8003da0 <main+0x120>)
 8003d64:	480f      	ldr	r0, [pc, #60]	; (8003da4 <main+0x124>)
 8003d66:	f7fd ff51 	bl	8001c0c <xTaskCreate>
				NULL, 								/* A parameter that can be passed into the task.  Not used in this simple demo. */
				mainQUEUE_RECEIVE_TASK_PRIORITY,	/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
				NULL );								/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 8003d6a:	f7fe f8b5 	bl	8001ed8 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 8003d6e:	e7fe      	b.n	8003d6e <main+0xee>
 8003d70:	20001dec 	.word	0x20001dec
 8003d74:	20001df0 	.word	0x20001df0
 8003d78:	08004f10 	.word	0x08004f10
 8003d7c:	08004f1c 	.word	0x08004f1c
 8003d80:	20001df4 	.word	0x20001df4
 8003d84:	08004f28 	.word	0x08004f28
 8003d88:	08004f38 	.word	0x08004f38
 8003d8c:	08003da9 	.word	0x08003da9
 8003d90:	08004f48 	.word	0x08004f48
 8003d94:	08003df1 	.word	0x08003df1
 8003d98:	08004f58 	.word	0x08004f58
 8003d9c:	08003f3d 	.word	0x08003f3d
 8003da0:	08004f68 	.word	0x08004f68
 8003da4:	080040a9 	.word	0x080040a9

08003da8 <prvTrafficFlowAdjustment>:
}
/*-----------------------------------------------------------*/

static void prvTrafficFlowAdjustment(void *pvParameters) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	u_int16_t ulReceivedValue;
	while (1) {
		// Run every 250ms
		vTaskDelay(250);
 8003db0:	20fa      	movs	r0, #250	; 0xfa
 8003db2:	f7fe f85d 	bl	8001e70 <vTaskDelay>

		// Get value from flowQueue
		xQueueReceive( xFlowQueue, &ulReceivedValue, portMAX_DELAY );
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <prvTrafficFlowAdjustment+0x44>)
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	f107 010e 	add.w	r1, r7, #14
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	f7fd fca4 	bl	8001710 <xQueueGenericReceive>
		// Put flow into global
		uint16_t gFlow = readFlow();
 8003dc8:	f7ff fe70 	bl	8003aac <readFlow>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	81bb      	strh	r3, [r7, #12]
		printf(gFlow);
 8003dd0:	89bb      	ldrh	r3, [r7, #12]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc92 	bl	80046fc <printf>

		// Push value back to queue
		xQueueSend( xFlowQueue, &gFlow, 0);
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <prvTrafficFlowAdjustment+0x44>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	f107 010c 	add.w	r1, r7, #12
 8003de0:	2300      	movs	r3, #0
 8003de2:	2200      	movs	r2, #0
 8003de4:	f7fd fa7c 	bl	80012e0 <xQueueGenericSend>
	while (1) {
 8003de8:	e7e2      	b.n	8003db0 <prvTrafficFlowAdjustment+0x8>
 8003dea:	bf00      	nop
 8003dec:	20001df0 	.word	0x20001df0

08003df0 <prvTrafficCreator>:
	}
}

static void prvTrafficCreator(void *pvParameters) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	// Initialize timer
	time_t t;
	u_int16_t  flow;
	u_int32_t boardState;
	srand((unsigned) time(&t));
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ffbf 	bl	8004d80 <time>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 ff59 	bl	8004cbc <srand>

	while (1) {
		// Run every 250ms
		vTaskDelay(250);
 8003e0a:	20fa      	movs	r0, #250	; 0xfa
 8003e0c:	f7fe f830 	bl	8001e70 <vTaskDelay>

		// Get value from flowQueue
		xQueueReceive( xQueue, &boardState, portMAX_DELAY );
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <prvTrafficCreator+0xc0>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	f107 010c 	add.w	r1, r7, #12
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	f7fd fc77 	bl	8001710 <xQueueGenericReceive>
		xQueueReceive( xFlowQueue, &flow, portMAX_DELAY );
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <prvTrafficCreator+0xc4>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f107 0112 	add.w	r1, r7, #18
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	f7fd fc6e 	bl	8001710 <xQueueGenericReceive>

		// Get random probability
		int prob = rand() % MAX_OF_POT;
 8003e34:	f000 ff6a 	bl	8004d0c <rand>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003e3e:	fb92 f1f3 	sdiv	r1, r2, r3
 8003e42:	fb03 f301 	mul.w	r3, r3, r1
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	61bb      	str	r3, [r7, #24]

		// Determine if a vehicle arrives
		Vehicle nextVehicle;
		if (prob >= flow) {
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	dc02      	bgt.n	8003e5a <prvTrafficCreator+0x6a>
			nextVehicle = TRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e001      	b.n	8003e5e <prvTrafficCreator+0x6e>
		} else {
			nextVehicle = FALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	77fb      	strb	r3, [r7, #31]
		}

		// TODO: Where does logic go for adv vs. stickyAdv
		if ((boardState & LIGHT_MASK) == LIGHT_GREEN) {
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d108      	bne.n	8003e7c <prvTrafficCreator+0x8c>
			boardState = advVehicles(nextVehicle, boardState);
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fe27 	bl	8003ac4 <advVehicles>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e007      	b.n	8003e8c <prvTrafficCreator+0x9c>
		}
		else {
			boardState = stickyAdvVehicles(nextVehicle, boardState);
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fe44 	bl	8003b10 <stickyAdvVehicles>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60fb      	str	r3, [r7, #12]
		}

		// Push value back to queue
		xQueueSend( xFlowQueue, &flow, 0);
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <prvTrafficCreator+0xc4>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	f107 0112 	add.w	r1, r7, #18
 8003e94:	2300      	movs	r3, #0
 8003e96:	2200      	movs	r2, #0
 8003e98:	f7fd fa22 	bl	80012e0 <xQueueGenericSend>
		xQueueSend( xQueue, &boardState, 0);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <prvTrafficCreator+0xc0>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	f107 010c 	add.w	r1, r7, #12
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f7fd fa1a 	bl	80012e0 <xQueueGenericSend>
	while (1) {
 8003eac:	e7ad      	b.n	8003e0a <prvTrafficCreator+0x1a>
 8003eae:	bf00      	nop
 8003eb0:	20001dec 	.word	0x20001dec
 8003eb4:	20001df0 	.word	0x20001df0

08003eb8 <vChangeTrafficLight>:
	}
}


static void vChangeTrafficLight( xTimerHandle xTimer )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	u_int32_t boardState;

	xQueueReceive( xQueue, &boardState, portMAX_DELAY );
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <vChangeTrafficLight+0x80>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	f107 0108 	add.w	r1, r7, #8
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	f7fd fc1f 	bl	8001710 <xQueueGenericReceive>
	u_int32_t lightColor = boardState & LIGHT_MASK;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003ed8:	60fb      	str	r3, [r7, #12]

	if (lightColor == LIGHT_GREEN) {
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d107      	bne.n	8003ef2 <vChangeTrafficLight+0x3a>
		boardState = changeLightColor(YELLOW, boardState);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7ff fe80 	bl	8003bec <changeLightColor>
 8003eec:	4603      	mov	r3, r0
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	e016      	b.n	8003f20 <vChangeTrafficLight+0x68>
	} else if (lightColor == LIGHT_YELLOW) {
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef8:	d107      	bne.n	8003f0a <vChangeTrafficLight+0x52>
		boardState = changeLightColor(RED, boardState);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4619      	mov	r1, r3
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7ff fe74 	bl	8003bec <changeLightColor>
 8003f04:	4603      	mov	r3, r0
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	e00a      	b.n	8003f20 <vChangeTrafficLight+0x68>
	} else if (lightColor == LIGHT_RED) {
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f10:	d106      	bne.n	8003f20 <vChangeTrafficLight+0x68>
		boardState = changeLightColor(GREEN, boardState);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4619      	mov	r1, r3
 8003f16:	2002      	movs	r0, #2
 8003f18:	f7ff fe68 	bl	8003bec <changeLightColor>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60bb      	str	r3, [r7, #8]
	}
	xQueueSend( xQueue, &boardState, 0);
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <vChangeTrafficLight+0x80>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	f107 0108 	add.w	r1, r7, #8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f7fd f9d8 	bl	80012e0 <xQueueGenericSend>
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20001dec 	.word	0x20001dec

08003f3c <prvTrafficLight>:

static void prvTrafficLight(void *pvParameters) {
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b08b      	sub	sp, #44	; 0x2c
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	6078      	str	r0, [r7, #4]
	// Create software timer variable
	xTimerHandle xTrafficLightSoftwareTimer = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

	// Initialize timer
	xTrafficLightSoftwareTimer = xTimerCreate("TrafficLightTimer", /* A text name, purely to help debugging. */
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <prvTrafficLight+0x15c>)
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f54:	4851      	ldr	r0, [pc, #324]	; (800409c <prvTrafficLight+0x160>)
 8003f56:	f7fe fdd7 	bl	8002b08 <xTimerCreate>
 8003f5a:	6178      	str	r0, [r7, #20]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xTrafficLightSoftwareTimer, 0 );
 8003f5c:	f7fe f8b2 	bl	80020c4 <xTaskGetTickCount>
 8003f60:	4602      	mov	r2, r0
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	2101      	movs	r1, #1
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7fe fe1a 	bl	8002ba4 <xTimerGenericCommand>

	u_int16_t  lastFlow;
	u_int16_t  flow;

	xQueueReceive( xFlowQueue, &flow, portMAX_DELAY );
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <prvTrafficLight+0x164>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	f107 010e 	add.w	r1, r7, #14
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	f7fd fbc7 	bl	8001710 <xQueueGenericReceive>
	lastFlow = flow;
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	83fb      	strh	r3, [r7, #30]
	xQueueSend( xFlowQueue, &flow, 0);
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <prvTrafficLight+0x164>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f107 010e 	add.w	r1, r7, #14
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2200      	movs	r2, #0
 8003f92:	f7fd f9a5 	bl	80012e0 <xQueueGenericSend>

	TickType_t xRemainingTime;
	while(1) {
		// Run every 250ms
		vTaskDelay(250);
 8003f96:	20fa      	movs	r0, #250	; 0xfa
 8003f98:	f7fd ff6a 	bl	8001e70 <vTaskDelay>

		xQueueReceive( xFlowQueue, &flow, portMAX_DELAY );
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <prvTrafficLight+0x164>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	f107 010e 	add.w	r1, r7, #14
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	f7fd fbb1 	bl	8001710 <xQueueGenericReceive>

		xRemainingTime = xTimerGetExpiryTime( xTrafficLightSoftwareTimer ) - xTaskGetTickCount();
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7fe fe44 	bl	8002c3c <xTimerGetExpiryTime>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	f7fe f885 	bl	80020c4 <xTaskGetTickCount>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	1ae3      	subs	r3, r4, r3
 8003fbe:	613b      	str	r3, [r7, #16]
		int newTime;

		if (((int)flow - (int)lastFlow) > 100) {
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	8bfb      	ldrh	r3, [r7, #30]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	; 0x64
 8003fca:	dd1e      	ble.n	800400a <prvTrafficLight+0xce>
			newTime = xRemainingTime * (1 + (float)((int)flow - (int)lastFlow)/(float)MAX_OF_POT);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	8bfb      	ldrh	r3, [r7, #30]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003fe6:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80040a4 <prvTrafficLight+0x168>
 8003fea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004002:	ee17 3a90 	vmov	r3, s15
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e02d      	b.n	8004066 <prvTrafficLight+0x12a>
		} else if (((int)flow - (int)lastFlow) < -100) {
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	461a      	mov	r2, r3
 800400e:	8bfb      	ldrh	r3, [r7, #30]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004016:	da24      	bge.n	8004062 <prvTrafficLight+0x126>
			newTime = xRemainingTime * (1 - (float)abs((int)flow - (int)lastFlow)/(float)(2*MAX_OF_POT));
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	461a      	mov	r2, r3
 8004026:	8bfb      	ldrh	r3, [r7, #30]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	bfb8      	it	lt
 800402e:	425b      	neglt	r3, r3
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004038:	f640 73ff 	movw	r3, #4095	; 0xfff
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004046:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800404a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405a:	ee17 3a90 	vmov	r3, s15
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e001      	b.n	8004066 <prvTrafficLight+0x12a>
		} else {
			newTime = xRemainingTime;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	61bb      	str	r3, [r7, #24]
		}
		if (newTime <= 0) newTime = 1;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	dc01      	bgt.n	8004070 <prvTrafficLight+0x134>
 800406c:	2301      	movs	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
		xTimerChangePeriod(xTrafficLightSoftwareTimer, newTime, 0);
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	2104      	movs	r1, #4
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f7fe fd92 	bl	8002ba4 <xTimerGenericCommand>
		lastFlow = flow;
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	83fb      	strh	r3, [r7, #30]

		xQueueSend( xFlowQueue, &flow, 0);
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <prvTrafficLight+0x164>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f107 010e 	add.w	r1, r7, #14
 800408c:	2300      	movs	r3, #0
 800408e:	2200      	movs	r2, #0
 8004090:	f7fd f926 	bl	80012e0 <xQueueGenericSend>
	while(1) {
 8004094:	e77f      	b.n	8003f96 <prvTrafficLight+0x5a>
 8004096:	bf00      	nop
 8004098:	08003eb9 	.word	0x08003eb9
 800409c:	08004f78 	.word	0x08004f78
 80040a0:	20001df0 	.word	0x20001df0
 80040a4:	00000fff 	.word	0x00000fff

080040a8 <prvDisplayBoard>:
	}
}



static void prvDisplayBoard(void *pvParameters) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	uint32_t ulReceivedValue;

	while(1) {
		// Run every 10mx
		vTaskDelay(10);
 80040b0:	200a      	movs	r0, #10
 80040b2:	f7fd fedd 	bl	8001e70 <vTaskDelay>

		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <prvDisplayBoard+0x3c>)
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f107 010c 	add.w	r1, r7, #12
 80040be:	2300      	movs	r3, #0
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	f7fd fb24 	bl	8001710 <xQueueGenericReceive>

		// Write to board
		writeBoard(ulReceivedValue);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fcb4 	bl	8003a38 <writeBoard>

		xQueueSend( xQueue, &ulReceivedValue, 0);
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <prvDisplayBoard+0x3c>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	f107 010c 	add.w	r1, r7, #12
 80040d8:	2300      	movs	r3, #0
 80040da:	2200      	movs	r2, #0
 80040dc:	f7fd f900 	bl	80012e0 <xQueueGenericSend>
		vTaskDelay(10);
 80040e0:	e7e6      	b.n	80040b0 <prvDisplayBoard+0x8>
 80040e2:	bf00      	nop
 80040e4:	20001dec 	.word	0x20001dec

080040e8 <vApplicationTickHook>:
}
/*-----------------------------------------------------------*/


void vApplicationTickHook( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <vApplicationTickHook+0x3c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <vApplicationTickHook+0x3c>)
 80040fa:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <vApplicationTickHook+0x3c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004104:	d309      	bcc.n	800411a <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <vApplicationTickHook+0x40>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	1d3a      	adds	r2, r7, #4
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fa74 	bl	80015fc <xQueueGiveFromISR>
		ulCount = 0UL;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <vApplicationTickHook+0x3c>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20001df8 	.word	0x20001df8
 8004128:	20001df4 	.word	0x20001df4

0800412c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8004130:	e7fe      	b.n	8004130 <vApplicationMallocFailedHook+0x4>

08004132 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 800413c:	e7fe      	b.n	800413c <vApplicationStackOverflowHook+0xa>

0800413e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004144:	f7fc fffe 	bl	8001144 <xPortGetFreeHeapSize>
 8004148:	4603      	mov	r3, r0
 800414a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 800414c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	; 0x30
 800415c:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 800415e:	2000      	movs	r0, #0
 8004160:	f7ff fd6a 	bl	8003c38 <NVIC_SetPriorityGrouping>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004164:	2101      	movs	r1, #1
 8004166:	2001      	movs	r0, #1
 8004168:	f7ff fb18 	bl	800379c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800416c:	2101      	movs	r1, #1
 800416e:	2002      	movs	r0, #2
 8004170:	f7ff fb14 	bl	800379c <RCC_AHB1PeriphClockCmd>
	/* Setup Port -X-
	 * Output
	 * Used to push values to shift register
	 */
	GPIO_InitTypeDef GPIO_PortA_InitStructure;
	GPIO_PortA_InitStructure.GPIO_Pin =  GPIO_Pin_1 | GPIO_Pin_2;
 8004174:	2306      	movs	r3, #6
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_PortA_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_PortA_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA,&GPIO_PortA_InitStructure);
 8004184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004188:	4619      	mov	r1, r3
 800418a:	4824      	ldr	r0, [pc, #144]	; (800421c <prvSetupHardware+0xc4>)
 800418c:	f7ff fa56 	bl	800363c <GPIO_Init>
	/* Setup Port -X-
	 * Input
	 * Used to read values from potentiometer
	 */
	GPIO_InitTypeDef GPIO_PortB_InitStructure;
	GPIO_PortB_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1;
 8004190:	2303      	movs	r3, #3
 8004192:	623b      	str	r3, [r7, #32]
	GPIO_PortB_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_PortB_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800419a:	2302      	movs	r3, #2
 800419c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB,&GPIO_PortB_InitStructure);
 80041a0:	f107 0320 	add.w	r3, r7, #32
 80041a4:	4619      	mov	r1, r3
 80041a6:	481e      	ldr	r0, [pc, #120]	; (8004220 <prvSetupHardware+0xc8>)
 80041a8:	f7ff fa48 	bl	800363c <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);//Enable clock for ADC Ports
 80041ac:	2101      	movs	r1, #1
 80041ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041b2:	f7ff fb13 	bl	80037dc <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);//Enable GPIO pin to read analog input
 80041b6:	2101      	movs	r1, #1
 80041b8:	2004      	movs	r0, #4
 80041ba:	f7ff faef 	bl	800379c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_initStructre;
	GPIO_initStructre.GPIO_Pin = GPIO_Pin_1; // Provide input to channel 10 of ADC i.e GPIO Pin 0 of Port C
 80041be:	2302      	movs	r3, #2
 80041c0:	61bb      	str	r3, [r7, #24]
	GPIO_initStructre.GPIO_Mode = GPIO_Mode_AN; //GPIO Pin as analog Mode
 80041c2:	2303      	movs	r3, #3
 80041c4:	773b      	strb	r3, [r7, #28]
	GPIO_initStructre.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC,&GPIO_initStructre);// GPIO Initialization
 80041ca:	f107 0318 	add.w	r3, r7, #24
 80041ce:	4619      	mov	r1, r3
 80041d0:	4814      	ldr	r0, [pc, #80]	; (8004224 <prvSetupHardware+0xcc>)
 80041d2:	f7ff fa33 	bl	800363c <GPIO_Init>

	// Analog Mode Deinitialization, Configuration and Initialization
	ADC_DeInit();
 80041d6:	f7fe ff9d 	bl	8003114 <ADC_DeInit>
	ADC_InitTypeDef ADC_InitStruct;
	ADC_InitStruct.ADC_ScanConvMode=DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	713b      	strb	r3, [r7, #4]
	ADC_InitStruct.ADC_Resolution=ADC_Resolution_12b;
 80041de:	2300      	movs	r3, #0
 80041e0:	603b      	str	r3, [r7, #0]
	ADC_InitStruct.ADC_ContinuousConvMode=ENABLE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	717b      	strb	r3, [r7, #5]
	ADC_InitStruct.ADC_ExternalTrigConv=ADC_ExternalTrigConv_T1_CC1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
	ADC_InitStruct.ADC_ExternalTrigConvEdge=ADC_ExternalTrigConvEdge_None;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
	ADC_InitStruct.ADC_DataAlign=ADC_DataAlign_Right;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_NbrOfConversion=1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStruct);
 80041f6:	463b      	mov	r3, r7
 80041f8:	4619      	mov	r1, r3
 80041fa:	480b      	ldr	r0, [pc, #44]	; (8004228 <prvSetupHardware+0xd0>)
 80041fc:	f7fe ff98 	bl	8003130 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 8004200:	2101      	movs	r1, #1
 8004202:	4809      	ldr	r0, [pc, #36]	; (8004228 <prvSetupHardware+0xd0>)
 8004204:	f7fe ffea 	bl	80031dc <ADC_Cmd>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 1, ADC_SampleTime_144Cycles);
 8004208:	2306      	movs	r3, #6
 800420a:	2201      	movs	r2, #1
 800420c:	210b      	movs	r1, #11
 800420e:	4806      	ldr	r0, [pc, #24]	; (8004228 <prvSetupHardware+0xd0>)
 8004210:	f7ff f800 	bl	8003214 <ADC_RegularChannelConfig>
	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8004214:	bf00      	nop
 8004216:	3730      	adds	r7, #48	; 0x30
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40020000 	.word	0x40020000
 8004220:	40020400 	.word	0x40020400
 8004224:	40020800 	.word	0x40020800
 8004228:	40012000 	.word	0x40012000

0800422c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800422c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800422e:	e003      	b.n	8004238 <LoopCopyDataInit>

08004230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004236:	3104      	adds	r1, #4

08004238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004238:	480a      	ldr	r0, [pc, #40]	; (8004264 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800423c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800423e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004240:	d3f6      	bcc.n	8004230 <CopyDataInit>
  ldr  r2, =_sbss
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004244:	e002      	b.n	800424c <LoopFillZerobss>

08004246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004248:	f842 3b04 	str.w	r3, [r2], #4

0800424c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800424e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004250:	d3f9      	bcc.n	8004246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004252:	f000 f82b 	bl	80042ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004256:	f000 fcf9 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800425a:	f7ff fd11 	bl	8003c80 <main>
  bx  lr    
 800425e:	4770      	bx	lr
  ldr  r3, =_sidata
 8004260:	08004fb0 	.word	0x08004fb0
  ldr  r0, =_sdata
 8004264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004268:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800426c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004270:	20001ec8 	.word	0x20001ec8

08004274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004274:	e7fe      	b.n	8004274 <ADC_IRQHandler>

08004276 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004288:	e7fe      	b.n	8004288 <HardFault_Handler+0x4>

0800428a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800428e:	e7fe      	b.n	800428e <MemManage_Handler+0x4>

08004290 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004294:	e7fe      	b.n	8004294 <BusFault_Handler+0x4>

08004296 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800429a:	e7fe      	b.n	800429a <UsageFault_Handler+0x4>

0800429c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b0:	4a16      	ldr	r2, [pc, #88]	; (800430c <SystemInit+0x60>)
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <SystemInit+0x60>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80042c0:	4a13      	ldr	r2, [pc, #76]	; (8004310 <SystemInit+0x64>)
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <SystemInit+0x64>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <SystemInit+0x64>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80042d2:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <SystemInit+0x64>)
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <SystemInit+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <SystemInit+0x64>)
 80042e4:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <SystemInit+0x68>)
 80042e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <SystemInit+0x64>)
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <SystemInit+0x64>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <SystemInit+0x64>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80042fa:	f000 f80d 	bl	8004318 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042fe:	4b03      	ldr	r3, [pc, #12]	; (800430c <SystemInit+0x60>)
 8004300:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004304:	609a      	str	r2, [r3, #8]
#endif
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	e000ed00 	.word	0xe000ed00
 8004310:	40023800 	.word	0x40023800
 8004314:	24003010 	.word	0x24003010

08004318 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004326:	4a36      	ldr	r2, [pc, #216]	; (8004400 <SetSysClock+0xe8>)
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <SetSysClock+0xe8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <SetSysClock+0xe8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3301      	adds	r3, #1
 8004340:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <SetSysClock+0x38>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800434e:	d1f0      	bne.n	8004332 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <SetSysClock+0xe8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800435c:	2301      	movs	r3, #1
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	e001      	b.n	8004366 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004362:	2300      	movs	r3, #0
 8004364:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d142      	bne.n	80043f2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800436c:	4a24      	ldr	r2, [pc, #144]	; (8004400 <SetSysClock+0xe8>)
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <SetSysClock+0xe8>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <SetSysClock+0xec>)
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <SetSysClock+0xec>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004382:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004384:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <SetSysClock+0xe8>)
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <SetSysClock+0xe8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800438c:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <SetSysClock+0xe8>)
 800438e:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <SetSysClock+0xe8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004398:	4a19      	ldr	r2, [pc, #100]	; (8004400 <SetSysClock+0xe8>)
 800439a:	4b19      	ldr	r3, [pc, #100]	; (8004400 <SetSysClock+0xe8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80043a2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <SetSysClock+0xe8>)
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <SetSysClock+0xf0>)
 80043a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80043aa:	4a15      	ldr	r2, [pc, #84]	; (8004400 <SetSysClock+0xe8>)
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <SetSysClock+0xe8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80043b6:	bf00      	nop
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <SetSysClock+0xe8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f9      	beq.n	80043b8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <SetSysClock+0xf4>)
 80043c6:	f240 6205 	movw	r2, #1541	; 0x605
 80043ca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <SetSysClock+0xe8>)
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <SetSysClock+0xe8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <SetSysClock+0xe8>)
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <SetSysClock+0xe8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80043e4:	bf00      	nop
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <SetSysClock+0xe8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d1f9      	bne.n	80043e6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000
 8004408:	07405408 	.word	0x07405408
 800440c:	40023c00 	.word	0x40023c00

08004410 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004420:	e004      	b.n	800442c <ts_itoa+0x1c>
		div *= base;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d2f3      	bcs.n	8004422 <ts_itoa+0x12>

	while (div != 0)
 800443a:	e029      	b.n	8004490 <ts_itoa+0x80>
	{
		int num = d/div;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	fbb3 f1f2 	udiv	r1, r3, r2
 800444e:	fb02 f201 	mul.w	r2, r2, r1
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	fb92 f3f3 	sdiv	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b09      	cmp	r3, #9
 8004464:	dd0a      	ble.n	800447c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6011      	str	r1, [r2, #0]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	3237      	adds	r2, #55	; 0x37
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	e009      	b.n	8004490 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	1c59      	adds	r1, r3, #1
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	6011      	str	r1, [r2, #0]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	3230      	adds	r2, #48	; 0x30
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1d2      	bne.n	800443c <ts_itoa+0x2c>
	}
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b088      	sub	sp, #32
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80044b2:	e07d      	b.n	80045b0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b25      	cmp	r3, #37	; 0x25
 80044ba:	d171      	bne.n	80045a0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3301      	adds	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d01e      	beq.n	8004508 <ts_formatstring+0x66>
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	dc06      	bgt.n	80044dc <ts_formatstring+0x3a>
 80044ce:	2b58      	cmp	r3, #88	; 0x58
 80044d0:	d050      	beq.n	8004574 <ts_formatstring+0xd2>
 80044d2:	2b63      	cmp	r3, #99	; 0x63
 80044d4:	d00e      	beq.n	80044f4 <ts_formatstring+0x52>
 80044d6:	2b25      	cmp	r3, #37	; 0x25
 80044d8:	d058      	beq.n	800458c <ts_formatstring+0xea>
 80044da:	e05d      	b.n	8004598 <ts_formatstring+0xf6>
 80044dc:	2b73      	cmp	r3, #115	; 0x73
 80044de:	d02b      	beq.n	8004538 <ts_formatstring+0x96>
 80044e0:	2b73      	cmp	r3, #115	; 0x73
 80044e2:	dc02      	bgt.n	80044ea <ts_formatstring+0x48>
 80044e4:	2b69      	cmp	r3, #105	; 0x69
 80044e6:	d00f      	beq.n	8004508 <ts_formatstring+0x66>
 80044e8:	e056      	b.n	8004598 <ts_formatstring+0xf6>
 80044ea:	2b75      	cmp	r3, #117	; 0x75
 80044ec:	d037      	beq.n	800455e <ts_formatstring+0xbc>
 80044ee:	2b78      	cmp	r3, #120	; 0x78
 80044f0:	d040      	beq.n	8004574 <ts_formatstring+0xd2>
 80044f2:	e051      	b.n	8004598 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	60fa      	str	r2, [r7, #12]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	1d11      	adds	r1, r2, #4
 80044fe:	6079      	str	r1, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
				break;
 8004506:	e047      	b.n	8004598 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	da07      	bge.n	8004528 <ts_formatstring+0x86>
					{
						val *= -1;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	425b      	negs	r3, r3
 800451c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	60fa      	str	r2, [r7, #12]
 8004524:	222d      	movs	r2, #45	; 0x2d
 8004526:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004528:	69f9      	ldr	r1, [r7, #28]
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	220a      	movs	r2, #10
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff6d 	bl	8004410 <ts_itoa>
				}
				break;
 8004536:	e02f      	b.n	8004598 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004542:	e007      	b.n	8004554 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	60fa      	str	r2, [r7, #12]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	1c51      	adds	r1, r2, #1
 800454e:	61b9      	str	r1, [r7, #24]
 8004550:	7812      	ldrb	r2, [r2, #0]
 8004552:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f3      	bne.n	8004544 <ts_formatstring+0xa2>
					}
				}
				break;
 800455c:	e01c      	b.n	8004598 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	220a      	movs	r2, #10
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff4f 	bl	8004410 <ts_itoa>
				break;
 8004572:	e011      	b.n	8004598 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	2210      	movs	r2, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff43 	bl	8004410 <ts_itoa>
				break;
 800458a:	e005      	b.n	8004598 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	60fa      	str	r2, [r7, #12]
 8004592:	2225      	movs	r2, #37	; 0x25
 8004594:	701a      	strb	r2, [r3, #0]
				  break;
 8004596:	bf00      	nop
			}
			fmt++;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3301      	adds	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	e007      	b.n	80045b0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	60fa      	str	r2, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	1c51      	adds	r1, r2, #1
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f af7d 	bne.w	80044b4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80045de:	e081      	b.n	80046e4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b25      	cmp	r3, #37	; 0x25
 80045e6:	d177      	bne.n	80046d8 <ts_formatlength+0x108>
		{
			++fmt;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3301      	adds	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	3b58      	subs	r3, #88	; 0x58
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d86a      	bhi.n	80046ce <ts_formatlength+0xfe>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <ts_formatlength+0x30>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	080046c1 	.word	0x080046c1
 8004604:	080046cf 	.word	0x080046cf
 8004608:	080046cf 	.word	0x080046cf
 800460c:	080046cf 	.word	0x080046cf
 8004610:	080046cf 	.word	0x080046cf
 8004614:	080046cf 	.word	0x080046cf
 8004618:	080046cf 	.word	0x080046cf
 800461c:	080046cf 	.word	0x080046cf
 8004620:	080046cf 	.word	0x080046cf
 8004624:	080046cf 	.word	0x080046cf
 8004628:	080046cf 	.word	0x080046cf
 800462c:	08004685 	.word	0x08004685
 8004630:	08004693 	.word	0x08004693
 8004634:	080046cf 	.word	0x080046cf
 8004638:	080046cf 	.word	0x080046cf
 800463c:	080046cf 	.word	0x080046cf
 8004640:	080046cf 	.word	0x080046cf
 8004644:	08004693 	.word	0x08004693
 8004648:	080046cf 	.word	0x080046cf
 800464c:	080046cf 	.word	0x080046cf
 8004650:	080046cf 	.word	0x080046cf
 8004654:	080046cf 	.word	0x080046cf
 8004658:	080046cf 	.word	0x080046cf
 800465c:	080046cf 	.word	0x080046cf
 8004660:	080046cf 	.word	0x080046cf
 8004664:	080046cf 	.word	0x080046cf
 8004668:	080046cf 	.word	0x080046cf
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046cf 	.word	0x080046cf
 8004674:	08004693 	.word	0x08004693
 8004678:	080046cf 	.word	0x080046cf
 800467c:	080046cf 	.word	0x080046cf
 8004680:	080046c1 	.word	0x080046c1
			{
			  case 'c':
		  		  va_arg(va, int);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	3304      	adds	r3, #4
 8004688:	603b      	str	r3, [r7, #0]
				  ++length;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
				  break;
 8004690:	e025      	b.n	80046de <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	330b      	adds	r3, #11
 8004696:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3304      	adds	r3, #4
 800469c:	603b      	str	r3, [r7, #0]
				  break;
 800469e:	e01e      	b.n	80046de <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	603a      	str	r2, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80046aa:	e002      	b.n	80046b2 <ts_formatlength+0xe2>
			  			  ++length;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	60ba      	str	r2, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f6      	bne.n	80046ac <ts_formatlength+0xdc>
			  	  }
				  break;
 80046be:	e00e      	b.n	80046de <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3308      	adds	r3, #8
 80046c4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3304      	adds	r3, #4
 80046ca:	603b      	str	r3, [r7, #0]
				  break;
 80046cc:	e007      	b.n	80046de <ts_formatlength+0x10e>
			  default:
				  ++length;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
				  break;
 80046d4:	bf00      	nop
 80046d6:	e002      	b.n	80046de <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f47f af79 	bne.w	80045e0 <ts_formatlength+0x10>
	}
	return length;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 80046fc:	b40f      	push	{r0, r1, r2, r3}
 80046fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
	int length = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800470a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800470e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004714:	f7ff ff5c 	bl	80045d0 <ts_formatlength>
 8004718:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800471a:	466b      	mov	r3, sp
 800471c:	461e      	mov	r6, r3
		char buf[length];
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	1e4b      	subs	r3, r1, #1
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	460b      	mov	r3, r1
 8004726:	461a      	mov	r2, r3
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004730:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004734:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004738:	460b      	mov	r3, r1
 800473a:	461a      	mov	r2, r3
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	00dd      	lsls	r5, r3, #3
 8004742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004746:	00d4      	lsls	r4, r2, #3
 8004748:	460b      	mov	r3, r1
 800474a:	3307      	adds	r3, #7
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	ebad 0d03 	sub.w	sp, sp, r3
 8004754:	466b      	mov	r3, sp
 8004756:	3300      	adds	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800475a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800475e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fe9b 	bl	80044a2 <ts_formatstring>
 800476c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4619      	mov	r1, r3
 8004774:	2001      	movs	r0, #1
 8004776:	f000 fbb7 	bl	8004ee8 <_write>
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800478a:	b004      	add	sp, #16
 800478c:	4770      	bx	lr
	...

08004790 <log>:
 8004790:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	4604      	mov	r4, r0
 8004798:	460d      	mov	r5, r1
 800479a:	f000 f875 	bl	8004888 <__ieee754_log>
 800479e:	4b34      	ldr	r3, [pc, #208]	; (8004870 <log+0xe0>)
 80047a0:	f993 6000 	ldrsb.w	r6, [r3]
 80047a4:	1c73      	adds	r3, r6, #1
 80047a6:	4680      	mov	r8, r0
 80047a8:	4689      	mov	r9, r1
 80047aa:	d05b      	beq.n	8004864 <log+0xd4>
 80047ac:	4622      	mov	r2, r4
 80047ae:	462b      	mov	r3, r5
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7fc f95e 	bl	8000a74 <__aeabi_dcmpun>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d153      	bne.n	8004864 <log+0xd4>
 80047bc:	2200      	movs	r2, #0
 80047be:	2300      	movs	r3, #0
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f7fc f94c 	bl	8000a60 <__aeabi_dcmpgt>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d14b      	bne.n	8004864 <log+0xd4>
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <log+0xe4>)
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	9008      	str	r0, [sp, #32]
 80047d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80047d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80047da:	b9a6      	cbnz	r6, 8004806 <log+0x76>
 80047dc:	4b26      	ldr	r3, [pc, #152]	; (8004878 <log+0xe8>)
 80047de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80047e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047e6:	4620      	mov	r0, r4
 80047e8:	2200      	movs	r2, #0
 80047ea:	2300      	movs	r3, #0
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fc f90f 	bl	8000a10 <__aeabi_dcmpeq>
 80047f2:	bb40      	cbnz	r0, 8004846 <log+0xb6>
 80047f4:	2301      	movs	r3, #1
 80047f6:	2e02      	cmp	r6, #2
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	d119      	bne.n	8004830 <log+0xa0>
 80047fc:	f000 fa20 	bl	8004c40 <__errno>
 8004800:	2321      	movs	r3, #33	; 0x21
 8004802:	6003      	str	r3, [r0, #0]
 8004804:	e019      	b.n	800483a <log+0xaa>
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <log+0xec>)
 8004808:	2200      	movs	r2, #0
 800480a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800480e:	4620      	mov	r0, r4
 8004810:	2200      	movs	r2, #0
 8004812:	2300      	movs	r3, #0
 8004814:	4629      	mov	r1, r5
 8004816:	f7fc f8fb 	bl	8000a10 <__aeabi_dcmpeq>
 800481a:	2800      	cmp	r0, #0
 800481c:	d0ea      	beq.n	80047f4 <log+0x64>
 800481e:	2302      	movs	r3, #2
 8004820:	429e      	cmp	r6, r3
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	d111      	bne.n	800484a <log+0xba>
 8004826:	f000 fa0b 	bl	8004c40 <__errno>
 800482a:	2322      	movs	r3, #34	; 0x22
 800482c:	6003      	str	r3, [r0, #0]
 800482e:	e011      	b.n	8004854 <log+0xc4>
 8004830:	4668      	mov	r0, sp
 8004832:	f000 f9fd 	bl	8004c30 <matherr>
 8004836:	2800      	cmp	r0, #0
 8004838:	d0e0      	beq.n	80047fc <log+0x6c>
 800483a:	4811      	ldr	r0, [pc, #68]	; (8004880 <log+0xf0>)
 800483c:	f000 f9fa 	bl	8004c34 <nan>
 8004840:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004844:	e006      	b.n	8004854 <log+0xc4>
 8004846:	2302      	movs	r3, #2
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	4668      	mov	r0, sp
 800484c:	f000 f9f0 	bl	8004c30 <matherr>
 8004850:	2800      	cmp	r0, #0
 8004852:	d0e8      	beq.n	8004826 <log+0x96>
 8004854:	9b08      	ldr	r3, [sp, #32]
 8004856:	b11b      	cbz	r3, 8004860 <log+0xd0>
 8004858:	f000 f9f2 	bl	8004c40 <__errno>
 800485c:	9b08      	ldr	r3, [sp, #32]
 800485e:	6003      	str	r3, [r0, #0]
 8004860:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	b00a      	add	sp, #40	; 0x28
 800486a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800486e:	bf00      	nop
 8004870:	20000018 	.word	0x20000018
 8004874:	08004f8a 	.word	0x08004f8a
 8004878:	c7efffff 	.word	0xc7efffff
 800487c:	fff00000 	.word	0xfff00000
 8004880:	08004f8d 	.word	0x08004f8d
 8004884:	00000000 	.word	0x00000000

08004888 <__ieee754_log>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004890:	b087      	sub	sp, #28
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4604      	mov	r4, r0
 8004898:	460d      	mov	r5, r1
 800489a:	da24      	bge.n	80048e6 <__ieee754_log+0x5e>
 800489c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80048a0:	4334      	orrs	r4, r6
 80048a2:	d108      	bne.n	80048b6 <__ieee754_log+0x2e>
 80048a4:	49ca      	ldr	r1, [pc, #808]	; (8004bd0 <__ieee754_log+0x348>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	2300      	movs	r3, #0
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fb ff72 	bl	8000794 <__aeabi_ddiv>
 80048b0:	b007      	add	sp, #28
 80048b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b6:	2900      	cmp	r1, #0
 80048b8:	da04      	bge.n	80048c4 <__ieee754_log+0x3c>
 80048ba:	f7fb fc8d 	bl	80001d8 <__aeabi_dsub>
 80048be:	2200      	movs	r2, #0
 80048c0:	2300      	movs	r3, #0
 80048c2:	e7f3      	b.n	80048ac <__ieee754_log+0x24>
 80048c4:	2200      	movs	r2, #0
 80048c6:	4bc3      	ldr	r3, [pc, #780]	; (8004bd4 <__ieee754_log+0x34c>)
 80048c8:	f7fb fe3a 	bl	8000540 <__aeabi_dmul>
 80048cc:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	460d      	mov	r5, r1
 80048d6:	49c0      	ldr	r1, [pc, #768]	; (8004bd8 <__ieee754_log+0x350>)
 80048d8:	428d      	cmp	r5, r1
 80048da:	dd06      	ble.n	80048ea <__ieee754_log+0x62>
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f7fb fc7c 	bl	80001dc <__adddf3>
 80048e4:	e7e4      	b.n	80048b0 <__ieee754_log+0x28>
 80048e6:	2600      	movs	r6, #0
 80048e8:	e7f5      	b.n	80048d6 <__ieee754_log+0x4e>
 80048ea:	152c      	asrs	r4, r5, #20
 80048ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80048f0:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80048f4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80048f8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80048fc:	4426      	add	r6, r4
 80048fe:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8004902:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8004906:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800490a:	ea41 0305 	orr.w	r3, r1, r5
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	2200      	movs	r2, #0
 8004914:	4bb1      	ldr	r3, [pc, #708]	; (8004bdc <__ieee754_log+0x354>)
 8004916:	f7fb fc5f 	bl	80001d8 <__aeabi_dsub>
 800491a:	1cab      	adds	r3, r5, #2
 800491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004920:	2b02      	cmp	r3, #2
 8004922:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8004926:	4682      	mov	sl, r0
 8004928:	468b      	mov	fp, r1
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	dc5b      	bgt.n	80049e8 <__ieee754_log+0x160>
 8004930:	2300      	movs	r3, #0
 8004932:	f7fc f86d 	bl	8000a10 <__aeabi_dcmpeq>
 8004936:	b1d0      	cbz	r0, 800496e <__ieee754_log+0xe6>
 8004938:	2c00      	cmp	r4, #0
 800493a:	f000 816e 	beq.w	8004c1a <__ieee754_log+0x392>
 800493e:	4620      	mov	r0, r4
 8004940:	f7fb fd98 	bl	8000474 <__aeabi_i2d>
 8004944:	a38e      	add	r3, pc, #568	; (adr r3, 8004b80 <__ieee754_log+0x2f8>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	4606      	mov	r6, r0
 800494c:	460f      	mov	r7, r1
 800494e:	f7fb fdf7 	bl	8000540 <__aeabi_dmul>
 8004952:	a38d      	add	r3, pc, #564	; (adr r3, 8004b88 <__ieee754_log+0x300>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	4604      	mov	r4, r0
 800495a:	460d      	mov	r5, r1
 800495c:	4630      	mov	r0, r6
 800495e:	4639      	mov	r1, r7
 8004960:	f7fb fdee 	bl	8000540 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	e7b8      	b.n	80048e0 <__ieee754_log+0x58>
 800496e:	a388      	add	r3, pc, #544	; (adr r3, 8004b90 <__ieee754_log+0x308>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	4650      	mov	r0, sl
 8004976:	4659      	mov	r1, fp
 8004978:	f7fb fde2 	bl	8000540 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	2000      	movs	r0, #0
 8004982:	4997      	ldr	r1, [pc, #604]	; (8004be0 <__ieee754_log+0x358>)
 8004984:	f7fb fc28 	bl	80001d8 <__aeabi_dsub>
 8004988:	4652      	mov	r2, sl
 800498a:	4606      	mov	r6, r0
 800498c:	460f      	mov	r7, r1
 800498e:	465b      	mov	r3, fp
 8004990:	4650      	mov	r0, sl
 8004992:	4659      	mov	r1, fp
 8004994:	f7fb fdd4 	bl	8000540 <__aeabi_dmul>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fb fdce 	bl	8000540 <__aeabi_dmul>
 80049a4:	4606      	mov	r6, r0
 80049a6:	460f      	mov	r7, r1
 80049a8:	b934      	cbnz	r4, 80049b8 <__ieee754_log+0x130>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4650      	mov	r0, sl
 80049b0:	4659      	mov	r1, fp
 80049b2:	f7fb fc11 	bl	80001d8 <__aeabi_dsub>
 80049b6:	e77b      	b.n	80048b0 <__ieee754_log+0x28>
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fb fd5b 	bl	8000474 <__aeabi_i2d>
 80049be:	a370      	add	r3, pc, #448	; (adr r3, 8004b80 <__ieee754_log+0x2f8>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	4680      	mov	r8, r0
 80049c6:	4689      	mov	r9, r1
 80049c8:	f7fb fdba 	bl	8000540 <__aeabi_dmul>
 80049cc:	a36e      	add	r3, pc, #440	; (adr r3, 8004b88 <__ieee754_log+0x300>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	4604      	mov	r4, r0
 80049d4:	460d      	mov	r5, r1
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f7fb fdb1 	bl	8000540 <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4630      	mov	r0, r6
 80049e4:	4639      	mov	r1, r7
 80049e6:	e0b2      	b.n	8004b4e <__ieee754_log+0x2c6>
 80049e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049ec:	f7fb fbf6 	bl	80001dc <__adddf3>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4650      	mov	r0, sl
 80049f6:	4659      	mov	r1, fp
 80049f8:	f7fb fecc 	bl	8000794 <__aeabi_ddiv>
 80049fc:	e9cd 0100 	strd	r0, r1, [sp]
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7fb fd37 	bl	8000474 <__aeabi_i2d>
 8004a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f7fb fd95 	bl	8000540 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a1e:	f7fb fd8f 	bl	8000540 <__aeabi_dmul>
 8004a22:	a35d      	add	r3, pc, #372	; (adr r3, 8004b98 <__ieee754_log+0x310>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	4606      	mov	r6, r0
 8004a2a:	460f      	mov	r7, r1
 8004a2c:	f7fb fd88 	bl	8000540 <__aeabi_dmul>
 8004a30:	a35b      	add	r3, pc, #364	; (adr r3, 8004ba0 <__ieee754_log+0x318>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fb fbd1 	bl	80001dc <__adddf3>
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	f7fb fd7f 	bl	8000540 <__aeabi_dmul>
 8004a42:	a359      	add	r3, pc, #356	; (adr r3, 8004ba8 <__ieee754_log+0x320>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fbc8 	bl	80001dc <__adddf3>
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	463b      	mov	r3, r7
 8004a50:	f7fb fd76 	bl	8000540 <__aeabi_dmul>
 8004a54:	a356      	add	r3, pc, #344	; (adr r3, 8004bb0 <__ieee754_log+0x328>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb fbbf 	bl	80001dc <__adddf3>
 8004a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a62:	f7fb fd6d 	bl	8000540 <__aeabi_dmul>
 8004a66:	a354      	add	r3, pc, #336	; (adr r3, 8004bb8 <__ieee754_log+0x330>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fb fd64 	bl	8000540 <__aeabi_dmul>
 8004a78:	a351      	add	r3, pc, #324	; (adr r3, 8004bc0 <__ieee754_log+0x338>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fbad 	bl	80001dc <__adddf3>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f7fb fd5b 	bl	8000540 <__aeabi_dmul>
 8004a8a:	a34f      	add	r3, pc, #316	; (adr r3, 8004bc8 <__ieee754_log+0x340>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fba4 	bl	80001dc <__adddf3>
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	f7fb fd52 	bl	8000540 <__aeabi_dmul>
 8004a9c:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aac:	f7fb fb96 	bl	80001dc <__adddf3>
 8004ab0:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8004ab4:	3551      	adds	r5, #81	; 0x51
 8004ab6:	ea45 0508 	orr.w	r5, r5, r8
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	4606      	mov	r6, r0
 8004abe:	460f      	mov	r7, r1
 8004ac0:	dd50      	ble.n	8004b64 <__ieee754_log+0x2dc>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <__ieee754_log+0x358>)
 8004ac6:	4650      	mov	r0, sl
 8004ac8:	4659      	mov	r1, fp
 8004aca:	f7fb fd39 	bl	8000540 <__aeabi_dmul>
 8004ace:	4652      	mov	r2, sl
 8004ad0:	465b      	mov	r3, fp
 8004ad2:	f7fb fd35 	bl	8000540 <__aeabi_dmul>
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	4689      	mov	r9, r1
 8004ada:	b994      	cbnz	r4, 8004b02 <__ieee754_log+0x27a>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fb7a 	bl	80001dc <__adddf3>
 8004ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aec:	f7fb fd28 	bl	8000540 <__aeabi_dmul>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4640      	mov	r0, r8
 8004af6:	4649      	mov	r1, r9
 8004af8:	f7fb fb6e 	bl	80001d8 <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	e755      	b.n	80049ae <__ieee754_log+0x126>
 8004b02:	a31f      	add	r3, pc, #124	; (adr r3, 8004b80 <__ieee754_log+0x2f8>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0c:	f7fb fd18 	bl	8000540 <__aeabi_dmul>
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	4604      	mov	r4, r0
 8004b16:	460d      	mov	r5, r1
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb fb5e 	bl	80001dc <__adddf3>
 8004b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b24:	f7fb fd0c 	bl	8000540 <__aeabi_dmul>
 8004b28:	a317      	add	r3, pc, #92	; (adr r3, 8004b88 <__ieee754_log+0x300>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460f      	mov	r7, r1
 8004b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b36:	f7fb fd03 	bl	8000540 <__aeabi_dmul>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4630      	mov	r0, r6
 8004b40:	4639      	mov	r1, r7
 8004b42:	f7fb fb4b 	bl	80001dc <__adddf3>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	f7fb fb43 	bl	80001d8 <__aeabi_dsub>
 8004b52:	4652      	mov	r2, sl
 8004b54:	465b      	mov	r3, fp
 8004b56:	f7fb fb3f 	bl	80001d8 <__aeabi_dsub>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	e726      	b.n	80049b2 <__ieee754_log+0x12a>
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	d13d      	bne.n	8004be4 <__ieee754_log+0x35c>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	4659      	mov	r1, fp
 8004b70:	f7fb fb32 	bl	80001d8 <__aeabi_dsub>
 8004b74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b78:	f7fb fce2 	bl	8000540 <__aeabi_dmul>
 8004b7c:	e7be      	b.n	8004afc <__ieee754_log+0x274>
 8004b7e:	bf00      	nop
 8004b80:	fee00000 	.word	0xfee00000
 8004b84:	3fe62e42 	.word	0x3fe62e42
 8004b88:	35793c76 	.word	0x35793c76
 8004b8c:	3dea39ef 	.word	0x3dea39ef
 8004b90:	55555555 	.word	0x55555555
 8004b94:	3fd55555 	.word	0x3fd55555
 8004b98:	df3e5244 	.word	0xdf3e5244
 8004b9c:	3fc2f112 	.word	0x3fc2f112
 8004ba0:	96cb03de 	.word	0x96cb03de
 8004ba4:	3fc74664 	.word	0x3fc74664
 8004ba8:	94229359 	.word	0x94229359
 8004bac:	3fd24924 	.word	0x3fd24924
 8004bb0:	55555593 	.word	0x55555593
 8004bb4:	3fe55555 	.word	0x3fe55555
 8004bb8:	d078c69f 	.word	0xd078c69f
 8004bbc:	3fc39a09 	.word	0x3fc39a09
 8004bc0:	1d8e78af 	.word	0x1d8e78af
 8004bc4:	3fcc71c5 	.word	0x3fcc71c5
 8004bc8:	9997fa04 	.word	0x9997fa04
 8004bcc:	3fd99999 	.word	0x3fd99999
 8004bd0:	c3500000 	.word	0xc3500000
 8004bd4:	43500000 	.word	0x43500000
 8004bd8:	7fefffff 	.word	0x7fefffff
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	3fe00000 	.word	0x3fe00000
 8004be4:	a30e      	add	r3, pc, #56	; (adr r3, 8004c20 <__ieee754_log+0x398>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bee:	f7fb fca7 	bl	8000540 <__aeabi_dmul>
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	f7fb faeb 	bl	80001d8 <__aeabi_dsub>
 8004c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c06:	f7fb fc9b 	bl	8000540 <__aeabi_dmul>
 8004c0a:	a307      	add	r3, pc, #28	; (adr r3, 8004c28 <__ieee754_log+0x3a0>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	4606      	mov	r6, r0
 8004c12:	460f      	mov	r7, r1
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	e6df      	b.n	80049da <__ieee754_log+0x152>
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	e647      	b.n	80048b0 <__ieee754_log+0x28>
 8004c20:	fee00000 	.word	0xfee00000
 8004c24:	3fe62e42 	.word	0x3fe62e42
 8004c28:	35793c76 	.word	0x35793c76
 8004c2c:	3dea39ef 	.word	0x3dea39ef

08004c30 <matherr>:
 8004c30:	2000      	movs	r0, #0
 8004c32:	4770      	bx	lr

08004c34 <nan>:
 8004c34:	2000      	movs	r0, #0
 8004c36:	4901      	ldr	r1, [pc, #4]	; (8004c3c <nan+0x8>)
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	7ff80000 	.word	0x7ff80000

08004c40 <__errno>:
 8004c40:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <__errno+0x8>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	2000001c 	.word	0x2000001c

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4e0d      	ldr	r6, [pc, #52]	; (8004c84 <__libc_init_array+0x38>)
 8004c50:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c52:	1ba4      	subs	r4, r4, r6
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	2500      	movs	r5, #0
 8004c58:	42a5      	cmp	r5, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	4e0b      	ldr	r6, [pc, #44]	; (8004c8c <__libc_init_array+0x40>)
 8004c5e:	4c0c      	ldr	r4, [pc, #48]	; (8004c90 <__libc_init_array+0x44>)
 8004c60:	f000 f996 	bl	8004f90 <_init>
 8004c64:	1ba4      	subs	r4, r4, r6
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	2500      	movs	r5, #0
 8004c6a:	42a5      	cmp	r5, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c74:	4798      	blx	r3
 8004c76:	3501      	adds	r5, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c7e:	4798      	blx	r3
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08004fa8 	.word	0x08004fa8
 8004c88:	08004fa8 	.word	0x08004fa8
 8004c8c:	08004fa8 	.word	0x08004fa8
 8004c90:	08004fac 	.word	0x08004fac

08004c94 <memcpy>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	1e43      	subs	r3, r0, #1
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	bd10      	pop	{r4, pc}
 8004ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ca8:	e7f7      	b.n	8004c9a <memcpy+0x6>

08004caa <memset>:
 8004caa:	4402      	add	r2, r0
 8004cac:	4603      	mov	r3, r0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d100      	bne.n	8004cb4 <memset+0xa>
 8004cb2:	4770      	bx	lr
 8004cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb8:	e7f9      	b.n	8004cae <memset+0x4>
	...

08004cbc <srand>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <srand+0x4c>)
 8004cc0:	681c      	ldr	r4, [r3, #0]
 8004cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	b9d3      	cbnz	r3, 8004cfe <srand+0x42>
 8004cc8:	2018      	movs	r0, #24
 8004cca:	f000 f87f 	bl	8004dcc <malloc>
 8004cce:	f243 330e 	movw	r3, #13070	; 0x330e
 8004cd2:	63a0      	str	r0, [r4, #56]	; 0x38
 8004cd4:	8003      	strh	r3, [r0, #0]
 8004cd6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004cda:	8043      	strh	r3, [r0, #2]
 8004cdc:	f241 2334 	movw	r3, #4660	; 0x1234
 8004ce0:	8083      	strh	r3, [r0, #4]
 8004ce2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004ce6:	80c3      	strh	r3, [r0, #6]
 8004ce8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004cec:	8103      	strh	r3, [r0, #8]
 8004cee:	2305      	movs	r3, #5
 8004cf0:	8143      	strh	r3, [r0, #10]
 8004cf2:	230b      	movs	r3, #11
 8004cf4:	8183      	strh	r3, [r0, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d00:	2200      	movs	r2, #0
 8004d02:	611d      	str	r5, [r3, #16]
 8004d04:	615a      	str	r2, [r3, #20]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	2000001c 	.word	0x2000001c

08004d0c <rand>:
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <rand+0x68>)
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	681c      	ldr	r4, [r3, #0]
 8004d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d14:	b9d3      	cbnz	r3, 8004d4c <rand+0x40>
 8004d16:	2018      	movs	r0, #24
 8004d18:	f000 f858 	bl	8004dcc <malloc>
 8004d1c:	f243 330e 	movw	r3, #13070	; 0x330e
 8004d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8004d22:	8003      	strh	r3, [r0, #0]
 8004d24:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004d28:	8043      	strh	r3, [r0, #2]
 8004d2a:	f241 2334 	movw	r3, #4660	; 0x1234
 8004d2e:	8083      	strh	r3, [r0, #4]
 8004d30:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004d34:	80c3      	strh	r3, [r0, #6]
 8004d36:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004d3a:	8103      	strh	r3, [r0, #8]
 8004d3c:	2305      	movs	r3, #5
 8004d3e:	8143      	strh	r3, [r0, #10]
 8004d40:	230b      	movs	r3, #11
 8004d42:	8183      	strh	r3, [r0, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	2300      	movs	r3, #0
 8004d48:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d4e:	480a      	ldr	r0, [pc, #40]	; (8004d78 <rand+0x6c>)
 8004d50:	690a      	ldr	r2, [r1, #16]
 8004d52:	694b      	ldr	r3, [r1, #20]
 8004d54:	4c09      	ldr	r4, [pc, #36]	; (8004d7c <rand+0x70>)
 8004d56:	4350      	muls	r0, r2
 8004d58:	fb04 0003 	mla	r0, r4, r3, r0
 8004d5c:	fba2 2304 	umull	r2, r3, r2, r4
 8004d60:	3201      	adds	r2, #1
 8004d62:	4403      	add	r3, r0
 8004d64:	f143 0300 	adc.w	r3, r3, #0
 8004d68:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d6c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	2000001c 	.word	0x2000001c
 8004d78:	5851f42d 	.word	0x5851f42d
 8004d7c:	4c957f2d 	.word	0x4c957f2d

08004d80 <time>:
 8004d80:	b513      	push	{r0, r1, r4, lr}
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <time+0x24>)
 8004d84:	4604      	mov	r4, r0
 8004d86:	2200      	movs	r2, #0
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	4669      	mov	r1, sp
 8004d8c:	f000 f80c 	bl	8004da8 <_gettimeofday_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	bfbc      	itt	lt
 8004d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d98:	9300      	strlt	r3, [sp, #0]
 8004d9a:	9800      	ldr	r0, [sp, #0]
 8004d9c:	b104      	cbz	r4, 8004da0 <time+0x20>
 8004d9e:	6020      	str	r0, [r4, #0]
 8004da0:	b002      	add	sp, #8
 8004da2:	bd10      	pop	{r4, pc}
 8004da4:	2000001c 	.word	0x2000001c

08004da8 <_gettimeofday_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4c07      	ldr	r4, [pc, #28]	; (8004dc8 <_gettimeofday_r+0x20>)
 8004dac:	2300      	movs	r3, #0
 8004dae:	4605      	mov	r5, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	f000 f881 	bl	8004ebc <_gettimeofday>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d102      	bne.n	8004dc4 <_gettimeofday_r+0x1c>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	b103      	cbz	r3, 8004dc4 <_gettimeofday_r+0x1c>
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001ec4 	.word	0x20001ec4

08004dcc <malloc>:
 8004dcc:	4b02      	ldr	r3, [pc, #8]	; (8004dd8 <malloc+0xc>)
 8004dce:	4601      	mov	r1, r0
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	f000 b803 	b.w	8004ddc <_malloc_r>
 8004dd6:	bf00      	nop
 8004dd8:	2000001c 	.word	0x2000001c

08004ddc <_malloc_r>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	1ccd      	adds	r5, r1, #3
 8004de0:	f025 0503 	bic.w	r5, r5, #3
 8004de4:	3508      	adds	r5, #8
 8004de6:	2d0c      	cmp	r5, #12
 8004de8:	bf38      	it	cc
 8004dea:	250c      	movcc	r5, #12
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	4606      	mov	r6, r0
 8004df0:	db01      	blt.n	8004df6 <_malloc_r+0x1a>
 8004df2:	42a9      	cmp	r1, r5
 8004df4:	d903      	bls.n	8004dfe <_malloc_r+0x22>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	f000 f85b 	bl	8004eb8 <__malloc_lock>
 8004e02:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <_malloc_r+0xb4>)
 8004e04:	6814      	ldr	r4, [r2, #0]
 8004e06:	4621      	mov	r1, r4
 8004e08:	b991      	cbnz	r1, 8004e30 <_malloc_r+0x54>
 8004e0a:	4c22      	ldr	r4, [pc, #136]	; (8004e94 <_malloc_r+0xb8>)
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b91b      	cbnz	r3, 8004e18 <_malloc_r+0x3c>
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f841 	bl	8004e98 <_sbrk_r>
 8004e16:	6020      	str	r0, [r4, #0]
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 f83c 	bl	8004e98 <_sbrk_r>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d126      	bne.n	8004e72 <_malloc_r+0x96>
 8004e24:	230c      	movs	r3, #12
 8004e26:	6033      	str	r3, [r6, #0]
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f000 f846 	bl	8004eba <__malloc_unlock>
 8004e2e:	e7e4      	b.n	8004dfa <_malloc_r+0x1e>
 8004e30:	680b      	ldr	r3, [r1, #0]
 8004e32:	1b5b      	subs	r3, r3, r5
 8004e34:	d41a      	bmi.n	8004e6c <_malloc_r+0x90>
 8004e36:	2b0b      	cmp	r3, #11
 8004e38:	d90f      	bls.n	8004e5a <_malloc_r+0x7e>
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	50cd      	str	r5, [r1, r3]
 8004e3e:	18cc      	adds	r4, r1, r3
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f83a 	bl	8004eba <__malloc_unlock>
 8004e46:	f104 000b 	add.w	r0, r4, #11
 8004e4a:	1d23      	adds	r3, r4, #4
 8004e4c:	f020 0007 	bic.w	r0, r0, #7
 8004e50:	1ac3      	subs	r3, r0, r3
 8004e52:	d01b      	beq.n	8004e8c <_malloc_r+0xb0>
 8004e54:	425a      	negs	r2, r3
 8004e56:	50e2      	str	r2, [r4, r3]
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	428c      	cmp	r4, r1
 8004e5c:	bf0d      	iteet	eq
 8004e5e:	6863      	ldreq	r3, [r4, #4]
 8004e60:	684b      	ldrne	r3, [r1, #4]
 8004e62:	6063      	strne	r3, [r4, #4]
 8004e64:	6013      	streq	r3, [r2, #0]
 8004e66:	bf18      	it	ne
 8004e68:	460c      	movne	r4, r1
 8004e6a:	e7e9      	b.n	8004e40 <_malloc_r+0x64>
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	6849      	ldr	r1, [r1, #4]
 8004e70:	e7ca      	b.n	8004e08 <_malloc_r+0x2c>
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d005      	beq.n	8004e88 <_malloc_r+0xac>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 f80a 	bl	8004e98 <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d0cd      	beq.n	8004e24 <_malloc_r+0x48>
 8004e88:	6025      	str	r5, [r4, #0]
 8004e8a:	e7d9      	b.n	8004e40 <_malloc_r+0x64>
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	bf00      	nop
 8004e90:	20001dfc 	.word	0x20001dfc
 8004e94:	20001e00 	.word	0x20001e00

08004e98 <_sbrk_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4c06      	ldr	r4, [pc, #24]	; (8004eb4 <_sbrk_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	f000 f812 	bl	8004ecc <_sbrk>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_sbrk_r+0x1a>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_sbrk_r+0x1a>
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20001ec4 	.word	0x20001ec4

08004eb8 <__malloc_lock>:
 8004eb8:	4770      	bx	lr

08004eba <__malloc_unlock>:
 8004eba:	4770      	bx	lr

08004ebc <_gettimeofday>:
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <_gettimeofday+0xc>)
 8004ebe:	2258      	movs	r2, #88	; 0x58
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	4770      	bx	lr
 8004ec8:	20001ec4 	.word	0x20001ec4

08004ecc <_sbrk>:
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <_sbrk+0x14>)
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	b909      	cbnz	r1, 8004ed8 <_sbrk+0xc>
 8004ed4:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <_sbrk+0x18>)
 8004ed6:	6019      	str	r1, [r3, #0]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	4402      	add	r2, r0
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	4770      	bx	lr
 8004ee0:	20001e04 	.word	0x20001e04
 8004ee4:	20001ec8 	.word	0x20001ec8

08004ee8 <_write>:
 8004ee8:	4b02      	ldr	r3, [pc, #8]	; (8004ef4 <_write+0xc>)
 8004eea:	2258      	movs	r2, #88	; 0x58
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	4770      	bx	lr
 8004ef4:	20001ec4 	.word	0x20001ec4
 8004ef8:	454c4449 	.word	0x454c4449
 8004efc:	00000000 	.word	0x00000000
 8004f00:	20726d54 	.word	0x20726d54
 8004f04:	00637653 	.word	0x00637653
 8004f08:	51726d54 	.word	0x51726d54
 8004f0c:	00000000 	.word	0x00000000
 8004f10:	6e69614d 	.word	0x6e69614d
 8004f14:	75657551 	.word	0x75657551
 8004f18:	00000065 	.word	0x00000065
 8004f1c:	776f6c46 	.word	0x776f6c46
 8004f20:	75657551 	.word	0x75657551
 8004f24:	00000065 	.word	0x00000065
 8004f28:	65764578 	.word	0x65764578
 8004f2c:	6553746e 	.word	0x6553746e
 8004f30:	6870616d 	.word	0x6870616d
 8004f34:	0065726f 	.word	0x0065726f
 8004f38:	776f6c46 	.word	0x776f6c46
 8004f3c:	756a6441 	.word	0x756a6441
 8004f40:	656d7473 	.word	0x656d7473
 8004f44:	0000746e 	.word	0x0000746e
 8004f48:	66617254 	.word	0x66617254
 8004f4c:	43636966 	.word	0x43636966
 8004f50:	74616572 	.word	0x74616572
 8004f54:	0000726f 	.word	0x0000726f
 8004f58:	66617254 	.word	0x66617254
 8004f5c:	4c636966 	.word	0x4c636966
 8004f60:	74686769 	.word	0x74686769
 8004f64:	00000000 	.word	0x00000000
 8004f68:	70736944 	.word	0x70736944
 8004f6c:	4279616c 	.word	0x4279616c
 8004f70:	6472616f 	.word	0x6472616f
 8004f74:	00000000 	.word	0x00000000
 8004f78:	66617254 	.word	0x66617254
 8004f7c:	4c636966 	.word	0x4c636966
 8004f80:	74686769 	.word	0x74686769
 8004f84:	656d6954 	.word	0x656d6954
 8004f88:	0072      	.short	0x0072
 8004f8a:	6f6c      	.short	0x6f6c
 8004f8c:	00000067 	.word	0x00000067

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
